// Performs end-to-end test synchronizing to the current testnet head

pipeline {
    agent { label "x86-4-32-xl" }

    options {
        timestamps ()
        timeout(time: 4, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
        DATAROOTPATH="/mnt/tmp-disk/tooltmp"
        DATADIRPATH="${DATAROOTPATH}/sonic"
        GENESISPATH="/mnt/tmp-disk/genesis"
        GENESISURL="https://download.fantom.network/builders"
    }

    parameters {
        string(
            name: 'TestnetGenesis',
            defaultValue: "builders-36960.g",
            description: 'Name of the testnet genesis file to download'
        )
        string(
            name: 'SonicVersion',
            defaultValue: "develop",
            description: 'Branch or commit hash for Sonic'
        )
        string(
            name: 'LaScalaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for LaScala'
        )
    }

    stages {
        stage('Checkout and build') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )

                dir('lascala') {
                    checkout scmGit(
                        branches: [[name: "${LaScalaVersion}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Fantom-foundation/LaScala.git'
                        ]]
                    )
                }

                sh "make"
            }
        }

        stage('Preparation') {
            steps {
                // setup
                sh "mkdir -p $GENESISPATH"

                script {
                    // remove old md5
                    sh "rm -f ${GENESISPATH}/${TestnetGenesis}.md5"

                    // download genesis
                    if (!fileExists("${GENESISPATH}/${TestnetGenesis}")) {
                        sh "wget ${GENESISURL}/${TestnetGenesis} -O ${GENESISPATH}/${TestnetGenesis} -nv"
                    }

                    // download MD5
                    sh "wget ${GENESISURL}/${TestnetGenesis}.md5 -O ${GENESISPATH}/${TestnetGenesis}.md5 -nv"
                    def md5Expected = sh(script: "cat ${GENESISPATH}/${TestnetGenesis}.md5", returnStdout: true);

                    String md5ExpectedHash = md5Expected.substring(0, md5Expected.lastIndexOf(' '));

                    // calculate MD5
                    def genesisMd5 = sh(script: "md5sum ${GENESISPATH}/${TestnetGenesis}", returnStdout: true);

                    String md5CalculatedHash = genesisMd5.substring(0, genesisMd5.lastIndexOf(' '));

                    sh "echo ${md5ExpectedHash}"
                    sh "echo ${md5CalculatedHash}"

                    // compare MD5
                    if (md5ExpectedHash.trim() != md5CalculatedHash.trim()) {
                        sh "echo removing corrupted file ${GENESISPATH}/${TestnetGenesis}"
                        sh "rm ${GENESISPATH}/${TestnetGenesis}"
                        currentBuild.result = 'FAILURE'
                        error("Error hash mismatch: got ${md5CalculatedHash}, expected got ${md5ExpectedHash}")
                    } else {
                        sh "echo hash ${md5CalculatedHash} confirmed"
                    }
                }
            }
        }

        stage('Create DB from genesis') {
           steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    // create db from a genesis file
                    sh "./build/sonictool --datadir ${DATADIRPATH} --cache 16047 genesis --experimental ${GENESISPATH}/${TestnetGenesis}"
                    sh "./build/sonictool --datadir ${DATADIRPATH} check live"
                }
            }
        }

        stage('Synchronization') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    // snychronization to network head
                    sh "./build/sonicd --datadir ${DATADIRPATH} --cache 16047 --verbosity 2 --exitwhensynced.age 1s --lachesis.suppress-frame-panic --config lascala/utils/sonic-config-testnet.toml"
                    sh "./build/sonictool --datadir ${DATADIRPATH} check live"
                }
            }
        }

        stage('Teardown') {
            steps {
                sh "make clean"
                sh "rm -rf ${DATAROOTPATH}"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "sonic")
            ]
        }
    }
}
