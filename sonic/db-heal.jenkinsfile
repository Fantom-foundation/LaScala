// Sonic DB Healing pipeline aims to test the functionality of DB healing tool.
// This test intentionally kills an archive node in the middle of the synchronization process
// and then restarts the node with the DB healing tool. The test is considered successful
// if the node can validate via check tool.

pipeline {
    agent { node "${params.Agent}" }

    options {
        timestamps ()
        timeout(time: 3, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
        SONICSTATEDB = ''
        OPTIONS = ''
    }

    parameters {
        string(
            name: 'SonicVersion',
            defaultValue: "develop",
            description: 'Branch or commit hash for Sonic'
        )
        string(
            //default agent for devnet. For mainnet, use x86-4-32-archive
            name: 'Agent',
            defaultValue: 'x86-4-32-m',
            description: 'Agent label to run the job. For Opera mainnet, use x86-4-32-archive.'
        )
        choice(
            name: 'Network',
            choices: ['Sonic devnet', 'Opera mainnet'],
            description: 'Network to test'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )
            }
        }

        stage('Configure & Build') {
            steps {
                sh 'make clean'
                sh 'make'

                script {
                    // resume from an existing statedb
                    if ("${Network}" == 'Opera mainnet') {
                        SONICSTATEDB = '/mnt/sonic-statedb/mainnet'
                        OPTIONS = '--lachesis.suppress-frame-panic'
                    // needs genesis and config files
                    } else if ("${Network}" == 'Sonic devnet') {
                        // variables
                        def tmppath = '/mnt/tmp-disk/'
                        def genesispath = "${tmppath}/genesis.json"
                        def tomlpath = "${tmppath}/sonic-devnet.toml"

                        SONICSTATEDB = "${tmppath}/sonic"
                        OPTIONS = "--config ${tomlpath}"

                        // download genesis and config files
                        sh "wget -O ${genesispath} https://storage.googleapis.com/sonic-snapshots/devnet/genesis.json"
                        sh "wget -O ${tomlpath} https://storage.googleapis.com/sonic-snapshots/devnet/config.toml"

                        // prepare stateDb from genesis
                        sh """./build/sonictool --datadir ${SONICSTATEDB} \
                            genesis json ${genesispath} \
                            --experimental --mode rpc"""
                    } else {
                        error 'Invalid network'
                    }
                }
            }
        }

        stage('Kill on sync') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    // send SIGKILL after 20 minutes to terminate the node and make DBs dirty
                    sh "timeout -s 9 20m ./build/sonicd --datadir ${SONICSTATEDB} --verbosity 2 ${OPTIONS}"
                }
            }
        }

        stage('Check corrupted DBs') {
            steps {
                script{
                    def liveCheckPass = true
                    def archiveCheckPass = true
                    try {
                        sh "./build/sonictool --datadir ${SONICSTATEDB} check live"
                    } catch (Exception e) {
                        echo "Exception: ${e}"
                        echo 'Live DB check failed as expected'
                        liveCheckPass = false
                    }

                    try {
                        sh "./build/sonictool --datadir ${SONICSTATEDB} check archive"
                    } catch (Exception e) {
                        echo "Exception: ${e}"
                        echo 'Archive DB check failed as expected'
                        archiveCheckPass = false
                    }
                    // set build result to failure if any of the checks passed.
                    if (liveCheckPass || archiveCheckPass) {
                        error 'DB check passed, but expected corrupted DBs.'
                    }
                }
            }
        }

        stage('Heal corrupted DBs') {
            steps {
                script {
                    sh "./build/sonictool --datadir ${SONICSTATEDB} heal"
                }
            }
        }

        stage('Check healed DBs') {
            steps {
                script{
                    def liveCheckPass = true
                    def archiveCheckPass = true
                    try {
                        sh "./build/sonictool --datadir ${SONICSTATEDB} check live"
                    } catch (Exception e) {
                        echo "Unexpected exception: ${e}"
                        liveCheckPass = false
                    }

                    try {
                        sh "./build/sonictool --datadir ${SONICSTATEDB} check archive"
                    } catch (Exception e) {
                        echo "Unexpected exception: ${e}"
                        archiveCheckPass = false
                    }
                    //set build result to failure if any of the checks failed
                    if (!liveCheckPass || !archiveCheckPass) {
                        error 'DB check failed after healing'
                    }
                }
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "sonic")
            ]
        }
    }
}
