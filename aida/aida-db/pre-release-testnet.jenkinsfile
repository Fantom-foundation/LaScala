pipeline {
    agent { label 'xapi310-autogen-mainnet' }

    options { timestamps () }

    environment {
        BRANCH = "origin/develop"
        PATH = '/usr/local/bin:/usr/bin:/bin:/usr/local/go/bin'
        PRIME = '--update-buffer-size 4000'
        VMLFVM = '--vm-impl lfvm'
        VMGETH = '--vm-impl geth'
        AIDADB = "--aida-db=/var/opera/Aida/testnet-data/aida-db"
        TMPDB = "--db-tmp=/var/opera/Aida/dbtmpjenkins"
        FROMBLOCK = 'lastPatch-1'
        TOBLOCK = 'last'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }
                
                checkout scmGit(
                    branches: [[name: "${BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId:  'AidaCI_PR',
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"
                sh "make all"
            }
        }
        
        stage('patch-info') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh "build/util-db info count ${AIDADB} --db-component all ${FROMBLOCK} ${TOBLOCK}"
                }
                sh "rm -rf *.dat"
            }
        }
        
        stage('aida-vm-lfvm') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh "build/aida-vm ${VMLFVM} ${AIDADB} --cpu-profile cpu-profile.dat --workers 32 --validate-tx ${FROMBLOCK} ${TOBLOCK}"
                }
                sh "rm -rf *.dat"
            }
        }
        
        stage('aida-vm-sdb validate-state-hash') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh "build/aida-vm-sdb substate ${VMLFVM} ${AIDADB} ${PRIME} ${TMPDB} --validate-state-hash --db-impl carmen --db-variant go-file --carmen-schema 5 --archive --archive-variant s5 --validate-tx --cpu-profile cpu-profile.dat --memory-profile mem-profile.dat --memory-breakdown --continue-on-failure ${FROMBLOCK} ${TOBLOCK}"
                }
                sh "rm -rf *.dat"
            }
        }

        stage('validate') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh "build/util-db validate ${AIDADB}"
                }
                sh "rm -rf *.dat"
            }
        }

        stage('tear-down') {
            steps {
                sh "make clean"
                sh "rm -rf *.dat"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "$currentBuild.absoluteUrl")
            ]
        }
    }
}