// Generic template for the LaScala pipelines
// It is based on the release testing pipelines. Stages can be replaced by more suitable ones.

pipeline {
    agent any // any / { label 'release' } / { node 'rel001' }

    options {
        timestamps ()
        // timeout(time: 5, unit: 'DAYS')
        // can be used to set timeout for the pipeline
    }

    environment {
        PATH = '/usr/local/bin:/usr/bin:/bin:/usr/local/go/bin'
    }

    // Parameters for the pipeline
    // more info: https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
    parameters {
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
    }

    stages {
        stage('Build') {
            // Build stage of the pipeline, preparation and setup for the main stage should be done here
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        credentialsId:  'AidaCI_PR',
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )

                sh "git submodule update --init --recursive"
                sh "go mod tidy"
                sh "make all"
            }
        }

        stage('Test stage') {
            // Main stage of the pipeline
            steps {
                sh 'echo "Running test stage"'

                sh "rm -f *.cpuprofile *.memprofile *.log"

                // The part which can easily fail can be wrapped in catchError block
                // to ensure execution of subsequent stages
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh 'echo "do something"'
                }

                // archiveArtifacts can be used to save any files or artifacts from the run to easily access them later
                // archiveArtifacts artifacts: '*.cpuprofile,*.memprofile,*.log'
            }
        }

        stage('Teardown') {
            // Teardown stage used for cleanup after pipeline run
            steps {
                sh 'echo "Running teardown stage"'

                sh 'make clean'
            }
        }
    }

    post {
        always {
            // Send notification with the build result to the Slack user or channel
            // If there is need to notify only single user on Slack, then user parameter should be used
            // string(name: 'user', value: "GITHUB_USERNAME")
            // Said user must be specified in the getTargetRoom() function in the notifications pipeline
            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}")
            ]
        }
    }
}
