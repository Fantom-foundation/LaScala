pipeline {
    agent {label 'db-small-nvme'}

    options {
        timestamps ()
        timeout (time: 24, unit: 'HOURS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GORACE = 'halt_on_error=1'
        GOROOT = '/usr/lib/go-1.21/'
        GOGC = '50'
        GOMEMLIMIT = '120GiB'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Aida.git']]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: 'main']],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)
                }
            }
        }

        stage('Build') {
            steps {
                sh "go mod tidy"
                sh "make -j aida-vm-sdb"
                sh 'go test ./...'
            }
        }

        stage('Run unit tests') {
            steps {
                dir('carmen/go') {
                    sh "go test ./... -tags=stress_test -count 1 -timeout 36000s -parallel 2"
                }
            }
        }
    }
/*
    post {
        always {
            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "$currentBuild.absoluteUrl")
            ]
        }
    }
*/
}
