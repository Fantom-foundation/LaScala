pipeline {
    agent {label 'x86-8-64-l'}
    
    options {
        timestamps ()
        timeout(time: 3, unit: 'HOURS') // expected: 1.5-2h
        disableConcurrentBuilds(abortPrevious: false)
    }
    environment {
        GORACE = 'halt_on_error=1'
        GOGC = '50'
        GOMEMLIMIT = '120GiB'
    }

    parameters {
        string(name: 'tmpDb', defaultValue: '/mnt/tmp-disk', description: 'Temporary directory to store the state DB.')
        string(name: 'aidaDb', defaultValue: '/mnt/aida-db-mainnet/aida-db', description: 'Temporary directory to read Aida DB from.')
        string(name: 'firstBlockHeight', defaultValue: '5000000', description: 'First block height to import.')
        string(name: 'secondBlockHeight', defaultValue: '6000000', description: 'Second block height to import.')
        string(name: 'aidaVersion', defaultValue: "main", description: 'Can be either branch name or commit hash.')
        string(name: 'carmenVersion', defaultValue: "main", description: 'Can be either branch name or commit hash.')
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout scmGit(
                    branches: [[name: "${aidaVersion}"]],
                    userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Aida.git']]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                    checkout scmGit(
                        branches: [[name: "${carmenVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                    )
                }
            }
        }

        stage('Build') {
            steps {
                sh "go mod tidy"
                sh "make -j aida-vm-sdb"
                sh "go test ./..."
                sh "mkdir -p ${params.tmpDb}/l"
            }
        }

        stage('Synchronise') {
            steps {
                sh "build/aida-vm-sdb substate --aida-db  ${params.aidaDb} --db-tmp  ${params.tmpDb}/l  --vm-impl=lfvm --db-impl carmen --db-variant go-file --carmen-schema 5 --keep-db  --validate-state-hash 0 ${params.firstBlockHeight} "
            }
        }

        stage('Verify Synchronized DB') {
            steps {
                sh "cd carmen/go && go run ./database/mpt/tool verify ${params.tmpDb}/l/state_db_carmen_go-file_${params.firstBlockHeight}/live"
            }
        }

        stage('Export') {
            steps {
                sh "cd carmen/go && go run ./database/mpt/tool export ${params.tmpDb}/l/state_db_carmen_go-file_${params.firstBlockHeight}/live ${params.tmpDb}/l/genesis.dat"
            }
        }

        stage('Import') {
            steps {
                sh "cd carmen/go && go run ./database/mpt/tool import-live-db ${params.tmpDb}/l/genesis.dat ${params.tmpDb}/l/state_db_carmen_go-file_${params.firstBlockHeight}-recov/live"
            }
        }

        stage('Verify Imported DB') {
            steps {
                sh "cd carmen/go && go run ./database/mpt/tool verify ${params.tmpDb}/l/state_db_carmen_go-file_${params.firstBlockHeight}-recov/live"
            }
        }

        stage('Continue Synchronise Live DB') {
            steps {
                sh "cp ${params.tmpDb}/l/state_db_carmen_go-file_${params.firstBlockHeight}/statedb_info.json ${params.tmpDb}/l/state_db_carmen_go-file_${params.firstBlockHeight}-recov/"
                script {nextBlock=params.firstBlockHeight.toInteger()+1}
                sh "build/aida-vm-sdb substate --aida-db ${params.aidaDb} --db-tmp ${params.tmpDb}/l --db-src ${params.tmpDb}/l/state_db_carmen_go-file_${params.firstBlockHeight}-recov/ --vm-impl=lfvm --db-impl carmen --db-variant go-file --carmen-schema 5 --keep-db --validate-state-hash ${nextBlock} ${params.secondBlockHeight}"
            }
        }
        stage('Re-verify Live DB') {
            steps {
                sh "cd carmen/go && go run ./database/mpt/tool verify ${params.tmpDb}/l/state_db_carmen_go-file_${params.secondBlockHeight}/live"
            }
        }
    }
     post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "carmen")
            ]
        }
    }
}