pipeline {
    agent { label 'x86-8-32-m' }

    options {
        timestamps ()
        timeout (time: 20, unit: 'MINUTES') // ~ 5 minutes
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '120GiB'
        AIDADB = '/mnt/aida-db-central/aida-db'
	    TMPDB = '/mnt/tmp-disk'
    }

    parameters {
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Aida.git']]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                    checkout scmGit(
                        branches: [[name: "${CarmenVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                    )
                }

                dir('eth-test-package') {
                    sh "ls"
                    sh "git clone https://github.com/ethereum/tests"
                }
            }
        }

        stage('Build') {
            steps {
                sh "go mod tidy"
                sh "make -j aida-vm-sdb"
                sh 'go test ./...'
            }
        }

        stage('Transient Storage') {
            steps {
                sh "rm -f *.cpuprofile *.memprofile *.log"

                sh "./build/aida-vm-sdb ethereum-test --validate --db-impl carmen --carmen-schema 5 --shadow-db --db-shadow-impl geth ${env.WORKSPACE}/eth-test-package/tests/GeneralStateTests/Cancun/stEIP1153-transientStorage/"
            }
        }
    }

    post {
            always {
                build job: '/Notifications/slack-notification', parameters: [
                    string(name: 'result', value: "${currentBuild.result}"),
                    string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                    string(name: 'duration', value: "${currentBuild.duration}"),
                    string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                    string(name: 'user', value: "carmen")
                ]
            }
        }
}