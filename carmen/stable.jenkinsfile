// Master job for testing carmen stable branch

pipeline {
    agent { label 'coordinator' }

    environment {
        PATH = '/usr/local/bin:/usr/bin:/bin:/usr/local/go/bin'
        AIDA_VERSION = ''
        CARMEN_VERSION  = ''
        TOSCA_VERSION = ''
    }

    parameters {
        string(defaultValue: "first", description: '', name: 'BlockFrom')
        string(defaultValue: "last", description: '', name: 'BlockTo')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'ToscaVersion')
    }

    stages {
        stage('Get last commit sha') {
            steps {
                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        credentialsId:  'AidaCI_PR',
                        url: "https://github.com/Fantom-foundation/Aida.git"
                    ]]
                )

                script {
                   AIDA_VERSION = sh (
                        script: 'git log -1 --pretty=format:"%H"',
                        returnStdout: true
                    ).trim()
                    echo "Aida branch last commit id: ${AIDA_VERSION}"
                }

                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[credentialsId:  'AidaCI_PR', url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)

                    script {
                       CARMEN_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Carmen branch last commit id: ${CARMEN_VERSION}"
                    }
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[credentialsId:  'AidaCI_PR', url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )

                    script {
                       TOSCA_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Tosca branch last commit id: ${TOSCA_VERSION}"
                    }
                }
            }
        }

        stage('Start parallel stage execution') {
            parallel {
                stage('Run aida-vm-sdb job') {
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F02-F05', parameters: [
                            string(name: 'NodeLabel', value: "rel006"),
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            [$class: 'BooleanParameterValue', name: 'RunF05', value: false],
                            [$class: 'BooleanParameterValue', name: 'RunF02', value: true]
                        ]
                    }
                }
                stage('Run unit test job') {
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F09', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}")
                        ]
                    }
                }
                stage('Run integration test job') {
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F04', parameters: [
                            string(name: 'BlockFrom', value: "first"),
                            string(name: 'BlockTo', value: "1000000"),
                            string(name: 'ArchiveQueryRate', value: "150"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('Run genesis test job') {
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P01', parameters: [
                            string(name: 'TmpDb', value: "/var/data/Aida/statedb"),
                            string(name: 'AidaDb', value: "/var/src/Aida/mainnet-data/aida-db"),
                            string(name: 'FirstBlockHeight', value: "5000000"),
                            string(name: 'SecondBlockHeight', value: "6000000"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}")
                        ]
                    }
                }
            }
        }
    }
}
