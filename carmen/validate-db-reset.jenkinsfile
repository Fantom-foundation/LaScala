pipeline {
    agent { label 'db-small-nvme' }

    options {
        timestamps ()
        timeout (time: 10, unit: 'HOURS') // ~7 hours
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '120GiB'
        AIDADB = '/mnt/aida-db-central/aida-db'
        TMPDB = '/mnt/tmp-disk'
    }

    parameters {
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
        string(defaultValue: "1000", description: 'How many iterations will script do.', name: 'NumberOfIterations')
        string(defaultValue: "1", description: 'Delay between start of sync process and forced termination (in seconds).', name: 'Window')
        string(defaultValue: "1", description: 'How often will Carmen create checkpoints (in blocks).', name: 'CheckpointGranularity')
        string(name: 'SonicVersion', defaultValue: "main", description: 'Can be either branch name or commit hash.')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Aida.git']]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                    checkout scmGit(
                        branches: [[name: "${CarmenVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                    )
                }

                dir('sonic') {
                    checkout scmGit(
                        branches: [[name: "${SonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
                    )
                }                   
            }
        }

        stage('Build') {
            steps {
                sh "go mod tidy"
                sh "make -j aida-vm-sdb"
                sh 'go test ./...'
            }
        }

        stage('Loop') {
            steps {
                sh "python3 ${env.WORKSPACE}/carmen/scripts/db-heal-test.py --aida ${env.WORKSPACE} --window ${Window} --cp-granularity ${CheckpointGranularity} --aida-db ${AIDADB} --tmp ${TMPDB} --iter ${NumberOfIterations}"

            }
        }
    }
    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "carmen")
            ]
        }
    }

}