// Norma CI test norma using "make test"

pipeline {
	agent { label 'norma' }
	
	options {
		timestamps ()
		timeout(time: 3, unit: 'HOURS')
		disableConcurrentBuilds(abortPrevious: true)
	}

	environment {
		GOROOT = '/usr/local/go'
		DOCKER_API_VERSION = 1.45
	}

	parameters {
		string(
        		name: 'NormaVersion',
			defaultValue: "main",
			description: 'Branch or commit hash for Norma'
		)
	        string(
			name: 'SonicVersion',
			defaultValue: "develop",
			description: 'Branch or commit hash for Sonic'
		)
	}

	stages {
		stage('Clone and Build Norma') {
			steps {
				script {
					currentBuild.description = "Building on ${env.NODE_NAME}"
				}
			}

			dir('norma') {
				checkout scmGit(
					branches: [[name: "${NormaVersion}"]],
					userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Norma.git']]
				)

				sh "make clean"
				sh "git submodule update --init --recursive"

				dir('client') {
					checkout scmGit(
						branches: [[name: "${SonicVersion}"]],
						userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
					)
				}

				sh "go mod tidy"
				sh "make -j"
			}
		}

		stage('Check Norma Format') {
			steps {
				catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
					sh 'diff=`${GOROOT}/bin/gofmt -l \$(find . -type f -name "*.go"| grep -v "/client/")`; echo "$diff"; test -z "$diff"'
				}
			}
		}

		stage('Test Norma') {
			steps {
				sh 'make test'
			}
		}

		stage('Test Baseline Scenarios') {
			steps {
				when { expression { testSuccess }}
					
				sh "build/norma run scenarios/test/baseline_check.yml"
			}
		}
	}
}
