// Runs Tosca Fuzzing Tests
pipeline {
    agent { label 'quick' }

    options {
        timestamps()
        // This is a global timeout for the whole pipeline,
        // it is a failsave to prevent the pipeline from running if missonfigured.
        // This timeout will set the pipeline to ABORTED when triggered
        timeout(time: 6, unit: 'HOURS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOROOT = '/usr/lib/go-1.21/'
        GOGC = '50'
        GOMEMLIMIT = '30GiB'
        GORACE = 'halt_on_error=1'
        PATH = "${env.HOME}/.cargo/bin:${env.PATH}" //< rustc
    }

    parameters {
        string(
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.',
            name: 'ToscaVersion'
        )

        choice(
            name: 'EntryPoint',
            choices: ['FuzzLfvm', 'FuzzGeth', 'FuzzDifferentialLfvmVsGeth'],
            description: 'Selects which fuzzer test function to start.'
        )
    }

    stages {
        stage('checkout') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "$ToscaVersion"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Tosca.git'
                    ]]
                )
                sh 'git submodule update --init --recursive --depth 1'
            }
        }

        stage('build-and-test') {
            steps {
                // Unit tests are run to ensure that the code is working as expected.
                sh 'make test'
            }
        }

        stage('fuzzing-test') {
            steps {
                script {
                    // Calculate 2/3 of the available cores; this reduces the
                    // memory usage, which led to test interruptions in the past.
                    def totalCores = sh(script: 'nproc', returnStdout: true).trim().toInteger()
                    def coresToUse = (totalCores * 2 / 3).toInteger()

                    // Fuzzing time is set to 5 hours. Notice that pipeline timeout
                    // is larger to accommodate for checkout, build, and test stages.
                    def timeout = '5h'

                    // Run the fuzzing tests
                    sh "go test -fuzz=${EntryPoint} ./go/ct -fuzztime ${timeout} -parallel ${coresToUse}"
                }
            }

            post {
                failure {
                    // Archive the faulty inputs found to be downloaded and analyzed.
                    archiveArtifacts artifacts: "go/ct/testdata/fuzz/${EntryPoint}/*"
                }
            }
        }
    }

    post {
        always {
            // Send a slack notification
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: 'tosca')
            ]
        }
    }
}
