// Runs Tosca Unit and Compliance Tests
pipeline {
    agent { label 'x86-16-16-s' }

    options {
        timestamps()
        timeout(time: 24, unit: 'HOURS')
    }

    environment {
        GORACE = 'halt_on_error=1'
    }

    parameters {
        string(
            name: 'ToscaVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
         )

        choice(
            name: 'TargetInterpreter',
            choices: ['geth', 'lfvm', 'evmzero'],
            description: 'Selects target interpreter for CT run.'
        )

        booleanParam(
            name: 'FullMode',
            defaultValue: true,
            description: 'Run CT in full mode.'
        )
    }

    stages {
        stage('build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: params.ToscaVersion]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Tosca.git'
                    ]]
                )
                sh 'git submodule update --init --recursive --depth 1'

                sh 'make'
            }
        }

        stage('unit-tests') {
            steps {
                sh 'make test'
            }
        }

        // Race detection tests:
        // Interpreter implementations shall be thread safe: multiple instances must run in parallel without
        // interference. Race detection increases the runtime significantly. Therefore, the number of test
        // cases is reduced by filtering for a subset of rules.
        stage('CT-race-detection') {
            steps {
                sh "go run -race ./go/ct/driver run -f push ${params.FullMode ? "--full-mode" : ""} ${params.TargetInterpreter}"
            }
        }

        stage('compliance-tests') {
            steps {
                sh "go run ./go/ct/driver run ${params.FullMode ? "--full-mode" : ""} ${params.TargetInterpreter}"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: 'tosca')
            ]
        }
    }
}
