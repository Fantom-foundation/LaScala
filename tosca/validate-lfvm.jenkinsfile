// Validate Substate using the Tosca LFVM implementation

pipeline {
    agent { label params.AgentLabel }

    options {
        timestamps ()
        timeout(time: 2, unit: 'DAYS') // expected ~15h for the default substateDB
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
    }

    parameters {
        string(
            name: 'BlockFrom',
            defaultValue: "first",
            description: 'Starting block'
        )
        string(
            name: 'BlockTo',
            defaultValue: "last",
            description: 'Ending block'
        )
        string(
            name: 'AidaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for Aida'
        )
        string(
            name: 'ToscaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for Tosca'
        )
        string(
            name: 'SubstateDB',
            defaultValue: "/mnt/aida-db-mainnet/aida-db",
            description: 'Path to a substate DB'
        )
        string(
            name: 'ChainID',
            defaultValue: "250",
            description: 'Chain ID of corresponding substate DB'
        )
        string(
            name: 'EvmImplementation',
            defaultValue: "opera",
            description: 'EVM implementation. Use "ethereum" for processing ethereum substate'
        )
        string(
            name: "AgentLabel",
            defaultValue: "x86-16-32-s",
            description: 'Agent to build this job. Recommended are "x86-16-32-s" for mainnet or testnet substate and "x86-16-64-s-ethereum-substate" for ethereum substate'
        )
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                dir('tosca') {
                	checkout scmGit(
                		branches: [[name: "${ToscaVersion}"]],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Tosca.git']]
                	)
                	sh "git submodule update --recursive --depth 1"
                }

                sh "go mod tidy"
                sh "make aida-vm"
            }
        }

        stage('validate') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh "build/aida-vm --workers 20 --aida-db ${SubstateDB} --chainid ${ChainID} --evm-impl ${EvmImplementation} ${params.EvmImplementation == 'ethereum' ? '--substate-encoding pb' : ''} --vm-impl lfvm --validate-tx ${BlockFrom} ${BlockTo}"
                }
            }
        }

        stage('teardown') {
            steps {
                sh "make clean"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.durationString}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "tosca")
            ]
        }
    }
}
