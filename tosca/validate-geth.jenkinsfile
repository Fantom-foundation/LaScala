// Validate Substate using Ethereum's reference VM implementation

pipeline {
    agent { label 'x86-8-32-m' }

    options {
        timestamps ()
        timeout(time: 2, unit: 'DAYS') // expected ~14h
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '60GiB'
    }

    parameters {
        string(defaultValue: "first", description: '', name: 'BlockFrom')
        string(defaultValue: "last", description: '', name: 'BlockTo')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'ToscaVersion')
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                dir('tosca') {
                	checkout scmGit(
                		branches: [[name: "${ToscaVersion}"]],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Tosca.git']]
                	)
                	sh "git submodule update --recursive --depth 1"
                }

                sh "go mod tidy"
                sh "make aida-vm"
            }
        }

        stage('validate') {
            steps {
                sh "rm -f *.cpuprofile *.memprofile *.log"
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh "build/aida-vm --workers 20 --aida-db /mnt/aida-db-central/aida-db --vm-impl geth --validate-tx ${BlockFrom} ${BlockTo}"
                }
            }
        }

        stage('teardown') {
            steps {
                sh "make clean"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.durationString}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "tosca")
            ]
        }
    }
}
