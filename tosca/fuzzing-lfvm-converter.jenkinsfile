// Runs Tosca Fuzzing Tests
pipeline {
    agent { label 'fuzzing' }

    options {
        timestamps()
        // This is a global timeout for the whole pipeline,
        // it is a failsave to prevent the pipeline from running if misconfigured.
        // This timeout will set the pipeline to ABORTED when triggered
        timeout(time: 2, unit: 'HOURS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOCACHE = '/mnt/tmp-disk/go-cache'
    }

    parameters {
        string(
            name: 'ToscaVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
        )

        booleanParam(
            name: 'CleanCache',
            defaultValue: false,
            description: 'clean cache before running'
        )
    }

    stages {
        stage('clean-cache') {
            when {
                expression { return params.CleanCache }
            }
            steps {
                script {
                    sh "rm -rf $GOCACHE"
                }
            }
        }

        stage('checkout') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: params.ToscaVersion]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Tosca.git'
                    ]]
                )
                sh 'git submodule update --init --recursive --depth 1'
            }
        }

        stage('build-and-test') {
            steps {
                // Unit tests are run to ensure that the code is working as expected.
                sh 'make test'
            }
        }

        stage('fuzzing-test') {
            steps {
                // Fuzzing test runs for the provided time duration.
                // Note: Make sure that the pipeline timeout is large enough
                // to accommodate the fuzzing test duration, otherwise test
                // will be aborted and therefore marked as red.
                sh 'go test ./go/interpreter/lfvm -run none -fuzz LfvmConverter --fuzztime 1h'
            }

            post {
                failure {
                    // Archive the faulty inputs found to be downloaded and analyzed.
                    archiveArtifacts artifacts: "go/ct/testdata/fuzz/$EntryPoint/*"
                }
            }
        }
    }

    post {
        always {
            // Send a slack notification
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: 'tosca')
            ]
        }
    }
}
