// Test functional correctness of live-db using mainnet

pipeline {
    agent { label 'long' }

    options {
        timestamps ()
        timeout(time: 5, unit: 'DAYS')
	// expected = 3 days
    }

    environment {
        PATH = '/usr/local/bin:/usr/bin:/bin:/usr/local/go/bin'
    }

    parameters {
        string(defaultValue: "zero", description: '', name: 'BlockFrom')
        string(defaultValue: "last", description: '', name: 'BlockTo')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'ToscaVersion')
	string(defaultValue: "/var/opera/Aida/register-run-db", description: '', name: 'RegisterRunPath')
	string(defaultValue: "", description: '', name: 'RunId')
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        credentialsId:  'AidaCI_PR',
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[credentialsId:  'AidaCI_PR', url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[credentialsId:  'AidaCI_PR', url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )
                }

                sh "go mod tidy"
                sh "make all"
            }
        }

        stage('Test stage') {
            steps {
                sh 'echo "Running testing stage"'

                sh "rm -f *.cpuprofile *.memprofile *.log"

		sh "mkdir -p ${RegisterRunPath}"

                sh """build/aida-vm-sdb  substate --validate-tx --validate-state-hash \
                                         --db-impl carmen --db-variant go-file --carmen-schema 5 \
                                         --vm-impl geth \
                                         --db-tmp /var/opera/Aida/dbtmpjenkins --aida-db /var/opera/Aida/mainnet-data/aida-db \
                                         --track-progress --no-heartbeat-logging \
                                         --memory-breakdown --cpu-profile ${BUILD_NUMBER}.cpuprofile --memory-profile ${BUILD_NUMBER}.memprofile \
					 --register-run ${RegisterRunPath} \
					 ${RunId != '' ? '--overwrite-run-id '+RunId : '' } \
                                         ${BlockFrom} ${BlockTo}"""

                archiveArtifacts artifacts: '*.cpuprofile,*.memprofile,*.log'
            }
        }

	stage('Generate Report') {
	    steps {
                sh 'echo "Running report generation stage"'

                sh """./scripts/analytics/rmd/gen_processing/reports.sh \
                      ./scripts/analytics/rmd/knit.R \
                      ${RegisterRunId}/${RunId}.db \
                      ./scripts/analytics/rmd/f1.rmd \
                      ./scripts/analytics/rmd"""

		// current script always output f1.html, this is a temporary workaround.
		sh 'mv scripts/analytics/rmd/f1.html scripts/analytics/rmd/f2.html'

                archiveArtifacts artifacts: 'scripts/analytics/rmd/f2.html'
	    }
	}

        stage('Teardown') {
            steps {
                sh "make clean"
            }
        }
    }
}
