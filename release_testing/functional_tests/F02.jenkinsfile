// F02 runs processes transaction with aida-vm-sdb in archive mode.
// State and root hash is validated after each transaction.
// F04 test processes transactions on live db and archive db concurently.
pipeline {
    agent { label 'coordinator' }

    options {
        timestamps ()
        timeout(time: 6, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    parameters {
        string(
            name: 'BlockFrom',
            defaultValue: 'first',
            description: 'Starting block'
        )
        string(
            name: 'BlockTo',
            defaultValue: 'last',
            description: 'Ending block'
        )
        string(
            name: 'AidaVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'CarmenVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'ToscaVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'SonicVersion',
            defaultValue: 'develop',
            description: 'Can be either branch name or commit hash.'
        )
    }

    stages {
        stage('Start parallel stage execution') {
            parallel {
                stage('0-15M') {
                    steps {
                        runAidaVmSdb("first", "15000000")
                    }
                }

                stage('15M-30M') {
                    steps {
                        runAidaVmSdb("15000001", "30000000")
                    }
                }

                stage('30M-50M') {
                    steps {
                        runAidaVmSdb("30000001", "50000000")
                    }
                }

                stage('50M-65M') {
                    steps {
                        runAidaVmSdb("50000001", "65000000")
                    }
                }

                stage('65M-70M') {
                    steps {
                        runAidaVmSdb("65000001", "70000000")
                    }
                }

                stage('70M-last') {
                    steps {
                        runAidaVmSdb("70000001", "last")
                    }
                }
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}

// a function for running aida-vm-sdb job for a specific range of blocks.
def runAidaVmSdb(first, last) {
    def genesisBlock = ""
    if (first.isNumber() && first.toInteger() > 0) {
        genesisBlock = first.toInteger() - 1
    }
    build job: '/Aida/aida-vm-sdb', parameters: [
        string(name: 'BlockFrom', value: "${first}"),
        string(name: 'BlockTo', value: "${last}"),
        string(name: 'GenesisBlock', value: "${genesisBlock}"),
        string(name: 'BucketPath', value: "carmen-genesis-generator/74"),
        string(name: 'AidaVersion', value: "$AidaVersion"),
        string(name: 'CarmenVersion', value: "$CarmenVersion"),
        string(name: 'ToscaVersion', value: "$ToscaVersion"),
        string(name: 'SonicVersion', value: "$SonicVersion")
    ]
}
