// Test processing of custom transactions and blocks
@Library('shared-library') _

pipeline {
    agent { label 'x86-8-32-m' }

    options {
        timestamps ()
        timeout(time: 10, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
    }

    parameters {
        string(
            name: 'Fork',
            defaultValue: 'cancun',
            description: 'Name of the fork block to start from'
        )
        string(
            name: 'BlocksToProcess',
            defaultValue: '1000',
            description: 'Number of blocks to process starting from fork'
        )
        string(
            name: 'BlockLength',
            defaultValue: "5000",
            description: 'Length of the block.'
        )
        string(
            name: 'RegisterRunPath',
            defaultValue: "/mnt/tmp-disk/register-run-db",
            description: 'Path where the database will be created.'
        )
        string(
            name: 'RunId',
            defaultValue: "",
            description: 'Forced name of the database'
        )
        string(
            name: 'AidaVersion',
            defaultValue: 'main',
            description: 'Branch or commit hash for Aida'
        )
        string(
            name: 'CarmenVersion',
            defaultValue: 'main',
            description: 'Branch or commit hash for Carmen'
        )
        string(
            name: 'ToscaVersion',
            defaultValue: 'main',
            description: 'Branch or commit hash for Tosca'
        )
        string(
            name: 'SonicVersion',
            defaultValue: 'develop',
            description: 'Branch or commit hash for Sonic'
        )
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)

                    sh "git submodule update --recursive"
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )

                    sh "git submodule update --recursive"
                }

                dir('sonic') {
                    checkout scmGit(
                        branches: [[name: "${SonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
                    )
                }

                sh "go mod tidy"
                sh "make all"
            }
        }

        stage('Test Mixed Transaction Types') {
            steps {
                sh 'echo "Running mixed transaction types test stage"'

                sh "mkdir -p ${RegisterRunPath}"

                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh """build/aida-vm-sdb tx-generator \
                                            --db-impl carmen --db-variant go-file --carmen-schema 5 \
                                            --db-tmp /mnt/tmp-disk \
                                            --shadow-db --db-shadow-impl geth \
                                            --vm-impl lfvm \
                                            --fork ${Fork} \
                                            --tx-type all --block-length ${BlockLength} \
                                            --register-run ${RegisterRunPath} \
                                            --overwrite-run-id ${RunId == '' ? BUILD_NUMBER+'_'+JOB_BASE_NAME : RunId} \
                                            ${BlockTo}"""
                }
            }
        }

        stage('Generate report') {
            steps {
                sh 'echo "Running report generation stage"'

                sh """./scripts/analytics/rmd/gen_processing_reports.sh \
                    ./scripts/analytics/rmd/knit.R \
                    ${RegisterRunPath}/${RunId == '' ? BUILD_NUMBER+'_'+JOB_BASE_NAME : RunId}.db \
                    ./scripts/analytics/rmd/f1.rmd \
                    ./scripts/analytics/rmd
                    """

                sh 'mv scripts/analytics/rmd/f1.html ./${BUILD_NUMBER}_${JOB_BASE_NAME}.html'
            }
        }

        stage('Teardown') {
            steps {
                sh "make clean"
            }
        }
    }

    post {
        always {
            uploadArtifacts(["*.cpuprofile", "*.memprofile", "*.log", "*.html"])

            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
