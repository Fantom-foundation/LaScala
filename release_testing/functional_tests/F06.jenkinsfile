// Test processing of custom transactions and blocks

pipeline {
    agent { label 'functional' }

    options {
        timestamps ()
        timeout(time: 5, unit: 'DAYS')
    }

    environment {
        PATH = '/usr/local/bin:/usr/bin:/bin:/usr/local/go/bin'
    }

    parameters {
        string(defaultValue: "london", description: '', name: 'BlockFrom')
        string(defaultValue: "london+1500", description: '', name: 'BlockTo')
        string(defaultValue: "develop", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'ToscaVersion')
        string(defaultValue: "5000", description: 'Length of the block.', name: 'BlockLength')
        string(defaultValue: "/var/data/Aida/register-run-db", description: 'Path where the database will be created.', name: 'RegisterRunPath')
        string(defaultValue: "", description: 'Forced name of the database', name: 'RunId')
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        credentialsId:  'AidaCI_PR',
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[credentialsId:  'AidaCI_PR', url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[credentialsId:  'AidaCI_PR', url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )
                }

                sh "git submodule update --recursive"

                sh "go mod tidy"
                sh "make all"
            }
        }

        stage('Test stage') {
            steps {
                sh 'echo "Running mixed transaction types test stage"'

                sh "mkdir -p ${RegisterRunPath}"

                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: 'Test Suite had a failure') {
                    sh """build/aida-vm-sdb tx-generator \
                                            --db-impl carmen --db-variant go-file --carmen-schema 5 \
                                            --db-tmp /var/data/Aida/statedb \
                                            --shadow-db --db-shadow-impl geth \
                                            --vm-impl geth \
                                            --tx-type all --block-length ${BlockLength} \
                                            --register-run ${RegisterRunPath} \
                                            --overwrite-run-id ${RunId == '' ? BUILD_NUMBER+'_'+JOB_BASE_NAME : RunId} \
                                            ${BlockFrom} ${BlockTo}"""
                }
            }
        }

        stage('Generate report') {
            steps {
                sh 'echo "Running report generation stage"'

                sh """./scripts/analytics/rmd/gen_processing_reports.sh \
                    ./scripts/analytics/rmd/knit.R \
                    ${RegisterRunPath}/${RunId == '' ? BUILD_NUMBER+'_'+JOB_BASE_NAME : RunId}.db \
                    ./scripts/analytics/rmd/f1.rmd \
                    ./scripts/analytics/rmd
                    """

                sh 'mv scripts/analytics/rmd/f1.html scripts/analytics/rmd/${BUILD_NUMBER}_${JOB_BASE_NAME}.html'

                archiveArtifacts artifacts: "scripts/analytics/rmd/${BUILD_NUMBER}_${JOB_BASE_NAME}.html"
            }
        }

        stage('Teardown') {
            steps {
                sh "make clean"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}")
            ]
        }
    }
}
