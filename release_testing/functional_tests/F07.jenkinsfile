// Test ethereum compliant data sets

pipeline {
    agent { label 'db-small-ssd' }

    options {
        timestamps ()
        timeout(time: 10, unit: 'HOURS') // Expected: few minutes at most
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOROOT = '/usr/lib/go-1.21/'
        GOGC = '50'
        GOMEMLIMIT = '60GiB'
        BLACKLIST = '''/mnt/tmp-disk/eth-tests/GeneralStateTests/stCodeCopyTest/ExtCodeCopyTests.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stCreate2/CreateMessageRevertedOOGInInit.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP158Specific/EXTCODESIZE_toEpmty.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP158Specific/vitalikTransactionTest.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stNonZeroCallsTest/NonZeroValue_SUICIDE_ToOneStorageKey.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stRevertTest/RevertPrecompiledTouchExactOOG.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stSpecialTest/eoaEmpty.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTimeConsuming/sstore_combinations_initial00_2.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTimeConsuming/sstore_combinations_initial00.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTimeConsuming/sstore_combinations_initial10_2.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTimeConsuming/sstore_combinations_initial10.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTimeConsuming/sstore_combinations_initial20_2.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTimeConsuming/sstore_combinations_initial20.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stZeroKnowledge2/ecadd_0-0_0-0_21000_80.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stZeroKnowledge2/ecadd_1-3_0-0_25000_80.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stZeroKnowledge2/ecmul_0-3_5616_28000_96.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stZeroKnowledge/ecmul_1-3_0_28000_80.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stExample/invalidTr.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stShift/shiftCombinations.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/NoSrcAccount.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/HighGasPrice.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/HighGasPriceParis.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/ValueOverflowParis.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/ValueOverflow.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/NoSrcAccountCreate.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/NoSrcAccount1559.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stTransactionTest/NoSrcAccountCreate1559.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP1559/lowGasLimit.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP1559/outOfFundsOldTypes.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP1559/outOfFunds.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP3607/transactionCollidingWithNonEmptyAccount_init_Paris.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP3607/transactionCollidingWithNonEmptyAccount_send.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP3607/transactionCollidingWithNonEmptyAccount_init.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP3607/transactionCollidingWithNonEmptyAccount_send_Paris.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP3607/transactionCollidingWithNonEmptyAccount_calls.json,\
            /mnt/tmp-disk/eth-tests/GeneralStateTests/stEIP3607/transactionCollidingWithNonEmptyAccount_callsItself.json'''
    }

    parameters {
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'ToscaVersion')
        string(defaultValue: "develop", description: 'Can be either branch name or commit hash.', name: 'SonicVersion')
    }

    stages {
        stage("Prepare ethereum testset") {
            steps {
                sh "rm -rf /mnt/tmp-disk/eth-tests"
                sh "git clone https://github.com/ethereum/tests.git /mnt/tmp-disk/eth-tests"
            }
        }
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )

                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)

                    sh "git submodule update --recursive"
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )
                    
                    sh "git submodule update --recursive"
                }
                
                dir('sonic') {
                    checkout scmGit(
                        branches: [[name: "${SonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
                    )
                }

                sh "go mod tidy"
                sh "make all"
            }
        }

        stage('Test stage') {
            steps {
                sh 'echo "Running testing stage"'

                sh "rm -f *.cpuprofile *.memprofile *.log"

                script {
                    def FILES_LIST = sh (script: "find /mnt/tmp-disk/eth-tests/GeneralStateTests/ -not -path '*/.*' -type f", returnStdout: true).trim()

                    def BLACKLIST_ARRAY = BLACKLIST.tokenize(",").collect { it.trim() }

                    for(String file : FILES_LIST.split("\\r?\\n")){
                        if (BLACKLIST_ARRAY.contains(file)) continue

                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            sh """build/aida-vm-sdb ethereum-test --validate-state-hash --continue-on-failure \
                                            --db-impl carmen --db-variant go-file --carmen-schema 5 \
                                            --db-tmp /mnt/tmp-disk \
                                            --shadow-db --db-shadow-impl geth \
                                            --vm-impl geth \
                                            --memory-breakdown --cpu-profile ${BUILD_NUMBER}.cpuprofile --memory-profile ${BUILD_NUMBER}.memprofile \
                                            ${file}"""
                        }
                    }
                }
            }
        }

        stage('Teardown') {
            steps {
                sh "make clean"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
