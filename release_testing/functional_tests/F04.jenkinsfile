// F04 test processes transactions on live db and archive db concurently.
pipeline {
    agent { label 'coordinator' }

    options {
        timestamps ()
        timeout(time: 6, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    parameters {
        string(
            name: 'BlockFrom',
            defaultValue: 'first',
            description: 'Starting block'
        )
        string(
            name: 'BlockTo',
            defaultValue: 'last',
            description: 'Ending block'
        )
        string(
            name: 'AidaVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'CarmenVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'ToscaVersion',
            defaultValue: 'main',
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'SonicVersion',
            defaultValue: 'develop',
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'ArchiveQueryRate',
            defaultValue: "200",
            description: 'Rate of processing historical transactions on archive database'
        )
        string(
            name: 'Workers',
            defaultValue: "40",
            description: 'Number of workers to process historical transactions on archive database'
        )
    }

    stages {
        stage('Start parallel stage execution') {
            parallel {
                stage('F02 block processing (mainnet) 0-15m') {
                    steps {
                        runAidaVmSdb("first", 15000000)
                    }
                }

                stage('F02 block processing (mainnet) 15m-30m') {
                    steps {
                        runAidaVmSdb(15000001, 30000000)
                    }
                }

                stage('F02 block processing (mainnet) 30m-50m') {
                    steps {
                        runAidaVmSdb(30000001, 50000000)
                    }
                }

                stage('F02 block processing (mainnet) 50m-65m') {
                    steps {
                        runAidaVmSdb(50000001, 65000000)
                    }
                }

                stage('F02 block processing (mainnet) 65m-70m') {
                    steps {
                        runAidaVmSdb(65000001, 70000000)
                    }
                }

                stage('F02 block processing (mainnet) 70m-last') {
                    steps {
                        runAidaVmSdb(70000001, "last")
                    }
                }
            }
        }
    }

    post {
            always {
                build job: '/Notifications/slack-notification', parameters: [
                    string(name: 'result', value: "${currentBuild.result}"),
                    string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                    string(name: 'duration', value: "${currentBuild.duration}"),
                    string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                    string(name: 'user', value: "aida")
                ]
            }
        }
    }
}

// a function for running aida-vm-sdb job for a specific range of blocks.
def runAidaVmSdb(first, last) {
    def genesisBlock = ""
    if (first.isNumber() && first > 0) {
        genesisBlock = first - 1
    }
    build job: '/ReleaseTesting/FunctionalTests/F02/F02', parameters: [
        string(name: 'BlockFrom', value: "${first}"),
        string(name: 'BlockTo', value: "${last}"),
        string(name: 'GenesisBlock', value: "${genesisBlock}"),
        string(name: 'CustomFlags', value: "--archive-query-rate ${ArchiveQueryRate} --workers ${Workers}"),
        string(name: 'BucketPath', value: "carmen-genesis-generator/74"),
        string(name: 'AidaVersion', value: "$AidaVersion"),
        string(name: 'CarmenVersion', value: "$CarmenVersion"),
        string(name: 'ToscaVersion', value: "$ToscaVersion"),
        string(name: 'SonicVersion', value: "$SonicVersion")
    ]
}
