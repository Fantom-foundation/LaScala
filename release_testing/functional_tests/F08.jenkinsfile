// Runs unit test of Carmen to secure that Carmen functions operates as intended
pipeline {
    agent { label 'norma' }

    options {
        timestamps ()
        timeout(time: 12, unit: 'HOURS')
        disableConcurrentBuilds(abortPrevious: false)
        // estimated 20-30 minutes
    }

    environment {
        GOROOT = '/usr/lib/go-1.21/'
        GOGC = '50'
        GOMEMLIMIT = '60GiB'
    }

    parameters {
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'NormaVersion')
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${NormaVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Norma.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                sh "go mod tidy"
                sh "make -j"
            }
        }

        stage('Run dynamic scenario') {
            steps {
                runScenario("dynamic")
            }
        }

//         stage('Run slope scenario') {
//             steps {
//                 runScenario("slope")
//             }
//         }

        stage('Run static scenario') {
            steps {
                runScenario("static")
            }
        }

        stage('Teardown') {
            steps {
                sh "make clean"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}

def runScenario(scenario) {
    echo "Starting Norma demonet ${scenario} scenario"

    sh "rm -rf /tmp/norma*"

    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE', message: "Test Suite had a failure during ${scenario} scenario") {
        sh "build/norma run --label='report' ./scenarios/demonet/${scenario}.yml"
    }

    sh "echo 'Moving report file'"

    sh "cp /tmp/norma*/single_eval_report.html ./${env.BUILD_NUMBER}_single_eval_report.html"
    sh "cp /tmp/norma*/measurements.csv ./${env.BUILD_NUMBER}_measurements.csv"

    step([
        $class: 'ClassicUploadStep',
        credentialsId: 'aida-jenkins-service-account',
        bucket: "gs://aida-jenkins-artifacts/$JOB_NAME/$BUILD_NUMBER",
        pattern: "${env.BUILD_NUMBER}_single_eval_report.html"
    ])

    step([
        $class: 'ClassicUploadStep',
        credentialsId: 'aida-jenkins-service-account',
        bucket: "gs://aida-jenkins-artifacts/$JOB_NAME/$BUILD_NUMBER",
        pattern: "${env.BUILD_NUMBER}_measurements.csv"
    ])
}