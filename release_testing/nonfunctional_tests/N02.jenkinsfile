// Measure performance of block processing with an archive database

@Library('shared-library') _

pipeline {
    agent { label "dedicate" }

    options {
        timestamps ()
        timeout(time: 12, unit: 'DAYS') // expected: 10 days
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '120GiB'
    }

    parameters {
        string(
            name: 'BlockFrom',
            defaultValue: 'first',
            description: 'Starting block'
        )
        string(
            name: 'BlockTo',
            defaultValue: 'last',
            description: 'Ending block'
        )
        string(
            name: 'AidaVersion',
            defaultValue: 'main',
            description: 'Branch or commit hash for Aida'
        )
        string(
            name: 'CarmenVersion',
            defaultValue: 'main',
            description: 'Branch or commit hash for Carmen'
        )
        string(
            name: 'ToscaVersion',
            defaultValue: 'main',
            description: 'Branch or commit hash for Tosca'
        )
        string(
            name: 'SonicVersion',
            defaultValue: 'develop',
            description: 'Branch or commit hash for Sonic'
        )
        string(
            name: 'Workers',
            defaultValue: '40',
            description: 'Number of workers'
        )
        string(
            name: 'RegisterRunPath',
            defaultValue: '/mnt/tmp-disk/register-run-db',
            description: 'Path to register run db'
        )
        string(
            name: 'RunId',
            defaultValue: '',
            description: 'Overrides name of the register run db'
        )
    }

    stages {
        stage('Build') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)

                    sh "git submodule update --recursive"
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )

                    sh "git submodule update --recursive"
                }

                dir('sonic') {
                    checkout scmGit(
                        branches: [[name: "${SonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
                    )
                }

                sh "go mod tidy"
                sh "make all"
            }
        }

        stage('N02 stage') {
            steps {
                sh 'echo "Running N02 stage"'

                sh "rm -f *.cpuprofile *.memprofile *.log"

                sh "mkdir -p ${RegisterRunPath}"

                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    sh """build/aida-vm-sdb  substate \
                                             --db-impl carmen --db-variant go-file --carmen-schema 5 \
                                             --vm-impl lfvm \
                                             --db-tmp /mnt/tmp-disk \
                                             --aida-db /mnt/aida-db-mainnet/aida-db \
                                             --track-progress --no-heartbeat-logging \
                                             --archive --archive-variant s5 \
                                             --register-run ${RegisterRunPath} \
                                             --overwrite-run-id ${RunId == '' ? BUILD_NUMBER+'_N02' : RunId} \
                                             --memory-breakdown --cpu-profile ${BUILD_NUMBER}.cpuprofile --memory-profile ${BUILD_NUMBER}.memprofile \
                                             ${BlockFrom} ${BlockTo}"""
                }
            }
        }

        stage('Generate Report') {
            steps {
                sh 'echo "Running report generation post-test"'

                sh """./scripts/analytics/rmd/gen_processing_reports.sh \
                      ./scripts/analytics/rmd/knit.R \
                      ${RegisterRunPath}/${RunId == '' ? BUILD_NUMBER+'_N02' : RunId}.db \
                      ./scripts/analytics/rmd/f1.rmd \
                      ./scripts/analytics/rmd"""

                sh 'mv scripts/analytics/rmd/f1.html ./${BUILD_NUMBER}_N02.html'
            }
        }

        stage('Teardown') {
            steps {
                sh 'echo "Running teardown stage"'

                sh "make clean"
            }
        }
    }

    post {
        always {
            uploadArtifacts(["*.cpuprofile", "*.memprofile", "*.log", "*.html"])

            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
