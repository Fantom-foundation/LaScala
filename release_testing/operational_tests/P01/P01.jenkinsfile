// Runs unit test of Carmen to secure that Carmen functions operates as intended
@Library('shared-library') _

def buildSuccess = false

pipeline {
    agent { label 'norma' }

    options {
        timestamps ()
        timeout(time: 2, unit: 'HOURS')
    }

    environment {
	GOROOT = '/usr/local/go'
        GOGC = '50'
        GOMEMLIMIT = '120GiB'
	DOCKER_API_VERSION = 1.45
    }

    parameters {
        string(
            name: 'NormaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for Norma'
        )
        string(
            name: 'SonicVersion',
            defaultValue: "develop",
            description: 'Branch or commit hash for Sonic'
        )
	string(
	    name: 'PathToScenario'
	    defaultValue: "scenario/test/baseline_check.yml", 
	    description: 'Scenario to run' 
	)
    }

    stages {
        stage('Clone and Build Norma') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

		dir('norma') {
                    checkout scmGit(
                        branches: [[name: "${NormaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Norma.git']]
                    )

		    sh "make clean"
		    sh "git submodule update --init --recursive"

		    dir('client') {
			checkout scmGit(
                            branches: [[name: "${SonicVersion}"]],
                            userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
                        )
		    }

                    sh "go mod tidy"
                    sh "make -j"
 		}
            }

	    post {
                success {
                    script {
                        buildSuccess = true
                    }
                }
            }
        }

	stage('Run Scenario') {
	    when { expression { buildSuccess }}

            steps {
	        echo "Starting Norma scenario: ${PathToScenario}"
                dir('runs') {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE' {
                        sh """../norma/build/norma run \
                            -o ${pwd} \
                            --label runs \
                            ../norma/${PathToScenario}"""
		    }
                }
	    }

	    post {
		failure {
		    dir('runs/norma_data_runs_latest') {
    			uploadArtifacts(["*.yml", "*.csv", "node_logs/*.log", "*.html"])
    		    }
    		}
            }
	}

        stage('Teardown') {
            steps {
                sh "make clean"
            }
        }
    }
}
