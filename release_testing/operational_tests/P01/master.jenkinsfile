// Runs unit test of Carmen to secure that Carmen functions operates as intended
@Library('shared-library') _

def buildSuccess = false
def TestSuccess = false

def demonetScenarios = [
	"scenario/demonet/slope.yml",
	"scenario/demonet/static.yml",
	"scenario/demonet/dynamic.yml",
]

def baselineScenarios = [
	"scenario/test/baseline_check.yml"
]

pipeline {
    agent { label 'norma' }

    options {
        timestamps ()
        timeout(time: 12, unit: 'HOURS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
	GOROOT = '/usr/local/go'
        GOGC = '50'
        GOMEMLIMIT = '120GiB'
	DOCKER_API_VERSION = 1.45
    }

    parameters {
        string(
            name: 'NormaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for Norma'
        )
	string(
            name: 'SonicVersion',
            defaultValue: "develop",
            description: 'Branch or commit hash for Sonic'
	)
	booleanParam(
	    name: 'enableBaselineTest'
	    defaultValue: true, 
	    description: 'If checked, dynamic stage will be executed', 
	)
	booleanParam(
	    name: 'enableDemonetTest'
	    defaultValue: false, 
	    description: 'If checked, slope stage will be executed', 
	)
    }

    stages {
        stage('Clone Norma') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"
                }

		dir('norma') {
                    checkout scmGit(
                        branches: [[name: "${NormaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Norma.git']]
                    )
 		}
            }
        }

	stage('Check Norma Format') {
	    steps {
		dir('norma') {
		    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
			sh 'diff=`${GOROOT}/bin/gofmt -l .`; echo "$diff"; test -z "$diff"'
		    }
		}
	    }
	}

	stage('Build Norma') {
    	    steps {
	        dir('norma') {
    		    sh "make clean"
    		    sh "git submodule update --init --recursive"

    		    dir('client') {
			checkout scmGit(
			    branches: [[name: "${SonicVersion}"]],
			    userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
			)
		    }

                    sh "go mod tidy"
    		    sh "make -j"		   
                }
	    }

	    post {
		success {
		    script {
			buildSuccess = true
		    }
		}
	    }
	}

	stage('Test Norma') {
	    steps {
		dir('norma') {
		    sh 'make test'
		}
	    }

	    post {
		success {
		    script {
			testSuccess = true
		    }
		}
	    }
	}

	stage('Run Target Scenarios in parallel') {
	    when { expression { testSuccess }}

	    parallel {
		stage("Run Demonet Scenarios") {
		    when { expression { Params.enableDemonetTest }}
		    
		    def jobs = [:]
		    demonetScenarios.each {
			s -> jobs["run ${s}"] = {
			    build job: '/ReleaseTesting/OperationalTests/P01/P01',
			    parameters: [
				string(name: 'NormaVersion', value: "${NormaVersion}"),
				string(name: 'SonicVersion', value: "${SonicVersion}"),
				string(name: 'PathToScenario', value: "${s}"),
			    ]
			}
		    }
		    parallel jobs
		}
		stage("Run Baseline Scenarios") {
		    when { expression { Params.enableBaselineTest }}
		    def jobs = [:]
		    baselineScenarios.each {
			s -> jobs["run ${s}"] = {
			    build job: '/ReleaseTesting/OperationalTests/P01/P01',
			    parameters: [
				string(name: 'NormaVersion', value: "${NormaVersion}"),
				string(name: 'SonicVersion', value: "${SonicVersion}"),
				string(name: 'PathToScenario', value: "${s}"),
			    ]
			}
		    }
		    parallel jobs
		}
	    }
	}

        stage('Teardown') {
            steps {
                sh "make clean"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
