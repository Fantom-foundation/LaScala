pipeline {
    agent {label 'x86-4-16-m'}

    options {
        timestamps ()
        timeout(time: 2, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '12GiB'

        // local files
        DATAROOTPATH = '/mnt/tmp-disk'
        DATADIRPATH = "${DATAROOTPATH}/sonic"
        EVENTDBPATH = "${DATAROOTPATH}/sonic_from_events"
        GENESISDBPATH = "${DATAROOTPATH}/sonic_from_genesis"
        GENESISPATH = "${DATAROOTPATH}/genesis"
        TOMLPATH = "${DATAROOTPATH}/sonic-devnet.toml"

        // genesis download url
        GENESISURL = ''
        TOMLURL = ''
        GENESISFILE = 'genesis.g'

        // client additional options
        OPTIONS = ''
        EPOCH = 0
    }

    parameters {
        string(
            name: 'SonicVersion',
            defaultValue: 'develop',
            description: 'Branch or commit hash for Sonic'
        )
        choice(
            name: 'Network',
            choices: ['Sonic devnet', 'Opera mainnet'],
            description: 'Network to test'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )
            }
        }

        // This stage sets genesis download url for the chosen network,
        // and also download the configuration file if needed.
        // Set addtional options for the network here.
        stage('Configure Network Parameters') {
            steps{
                script {
                    if ("${Network}" == "Opera mainnet") {
                        echo 'Target network: Opera mainnet'
                        GENESISURL = 'https://download.fantom.network/opera/mainnet/mainnet-5577-archive.g'
                        TOMLURL = ''
                        OPTIONS = '--lachesis.suppress-frame-panic'
                        EPOCH = 5577
                    } else if ("${Network}" == "Sonic devnet") {
                        echo 'Target network: Sonic devnet'
                        GENESISURL = 'https://storage.googleapis.com/sonic-snapshots/devnet/genesis.json'
                        TOMLURL = 'https://storage.googleapis.com/sonic-snapshots/devnet/config.toml'
                        OPTIONS = "--config ${TOMLPATH}"
                        EPOCH = 0
                    }
                }
            }
        }

        stage('Preparation and build') {
            steps {
                // setup
                sh "mkdir -p $GENESISPATH"
                sh "make"

                // download genesis
                script {
                    sh "wget -O ${GENESISPATH}/${GENESISFILE} ${GENESISURL} -nv"
                    sh "wget -O ${TOMLPATH} ${TOMLURL} -nv"

                }
            }
        }

        stage('Create DB from genesis') {
           steps {
               sh "rm -fr ${DATADIRPATH}"
               // create db from a genesis file
                sh """./build/sonictool --datadir ${DATADIRPATH} genesis \
                    ${params.Network == 'Sonic devnet' ? 'json' : ''} \
                    --experimental ${GENESISPATH}/${GENESISFILE}"""

                sh "./build/sonictool --datadir ${DATADIRPATH} check live"

                // copy db for import events
                sh "cp -r ${DATADIRPATH} ${EVENTDBPATH}"
            }
        }

        stage('Synchronize blockchain for 5 epoches') {
            steps {
                script {
                    EPOCH = EPOCH + 5 // update target epoch
                    sh "./build/sonicd --datadir ${DATADIRPATH} --exitwhensynced.epoch ${EPOCH} ${OPTIONS}"
                }
            }
        }

        stage('Export & import events') {
            steps {
                sh "./build/sonictool --datadir ${DATADIRPATH} events export ${DATAROOTPATH}/sonic.events"
                sh "./build/sonictool --datadir ${EVENTDBPATH} events import ${DATAROOTPATH}/sonic.events"
                sh "./build/sonictool --datadir ${EVENTDBPATH} check live"
            }
        }

        stage('Continue synchronize event-imported DB') {
            steps {
                script {
                    EPOCH = EPOCH + 5 // update target epoch
                    sh "./build/sonicd --datadir ${EVENTDBPATH} --exitwhensynced.epoch ${EPOCH} ${OPTIONS}"
                    sh "./build/sonictool --datadir ${EVENTDBPATH} check live"
                }
            }
        }

        stage('Export & import genesis') {
            steps {
                sh "./build/sonictool --datadir ${DATADIRPATH} genesis export ${DATAROOTPATH}/sonic.g"
                sh "./build/sonictool --datadir ${GENESISDBPATH} genesis --experimental ${DATAROOTPATH}/sonic.g"
                sh "./build/sonictool --datadir ${GENESISDBPATH} check live"
            }
        }

        stage('Continue synchronize genesis-imported DB') {
            steps {
                script {
                    EPOCH = EPOCH + 5 // update target epoch
                    sh "./build/sonicd --datadir ${GENESISDBPATH} --exitwhensynced.epoch ${EPOCH} ${OPTIONS}"
                    sh "./build/sonictool --datadir ${GENESISDBPATH} check live"
                }
            }
        }

        stage('Teardown') {
            steps {
                sh "make clean"
                sh "rm -rf ${DATAROOTPATH}"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.durationString}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "sonic")
            ]
        }
    }
}
