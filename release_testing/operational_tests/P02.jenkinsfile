pipeline {
    agent {label 'release'}

    options {
        timestamps ()
        timeout(time: 24, unit: 'HOURS')
    }

    environment {
        PATH = '/usr/local/bin:/usr/bin:/bin:/usr/local/go/bin'
        ROOTPATH="pwd"
        DATAROOTPATH="/var/data/Aida/tooltmp"
        DATADIRPATH="${DATAROOTPATH}/sonic"
        IMPORTPATH="${DATAROOTPATH}/sonic2"
        GENESIS="mainnet-5577-full-mpt.g"
        GENESISPATH="/var/src/Aida/genesis"
    }

    parameters {
        string(defaultValue: "develop", description: 'Can be either branch name or commit hash.', name: 'GoOperaNormaVersion')
    }

    stages {
        stage('Checkout') {
            steps {
                // checkout go-opera-norma develop branch
                checkout scmGit(
                    branches: [[name: "${GoOperaNormaVersion}"]],
                    userRemoteConfigs: [[
                        credentialsId:  'AidaCI_PAT',
                        url: 'https://github.com/Fantom-foundation/go-opera-norma.git'
                    ]]
                )
            }
        }

        stage('Preparation and build') {
            steps {
                // setup
                sh "rm -rf $ROOTPATH"
                sh "mkdir -p $ROOTPATH"
                sh "mkdir -p $GENESISPATH"
                sh "make"

                // download genesis
                script {
                    if (!fileExists("${GENESISPATH}/${GENESIS}")) {
                        sh "curl -o ${GENESISPATH}/${GENESIS} https://download.fantom.network/${GENESIS}"
                    }
                }
            }
        }

        stage('Create DB from legacy genesis') {
           steps {
               // create db from a legacy genesis file
                sh "./build/sonictool --datadir ${DATADIRPATH} genesis legacy ${GENESISPATH}/${GENESIS}"
                // copy db for import
                sh "cp -r ${DATADIRPATH} ${IMPORTPATH}"
            }
        }

        stage('Progress blockchain for 10 epoches') {
            steps {
                sh "./build/sonicd --datadir ${DATADIRPATH} --exitwhensynced.epoch 5587"
            }
        }

        stage('Export blockchain') {
            // export blockchain
            steps {
                sh "./build/sonictool --datadir ${DATADIRPATH} export events ${DATAROOTPATH}/sonic.events"
            }
        }

        stage('Import blockchain') {
            // import blockchain
            steps {
                sh "./build/sonictool --datadir ${IMPORTPATH} import events ${DATAROOTPATH}/sonic.events"
            }
        }

        stage('Teardown') {
            // teardown
            steps {
                sh "make clean"
                sh "rm -rf ${DATAROOTPATH}"
            }
        }
    }
    post {
        always {
            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}")
            ]
        }
    }
}