pipeline {
    agent {label 'db-small-ssd'}

    options {
        timestamps ()
        timeout(time: 2, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOROOT = '/usr/lib/go-1.21/'
        GOGC = '50'
        GOMEMLIMIT = '60GiB'
        DATAROOTPATH="/mnt/tmp-disk/tooltmp"
        DATADIRPATH="${DATAROOTPATH}/sonic"
        EVENTDBPATH="${DATAROOTPATH}/sonic_from_events"
        GENESISDBPATH="${DATAROOTPATH}/sonic_from_genesis"
        GENESISPATH="/mnt/tmp-disk/genesis"
    }

    parameters {
        string(defaultValue: "mainnet-288000-validator.g", description: 'Name of the genesis file to download', name: 'Genesis')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'SonicVersion')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )
            }
        }

        stage('Preparation and build') {
            steps {
                // setup
                sh "mkdir -p $GENESISPATH"
                sh "make"

                // download genesis
                script {
                    if (!fileExists("${GENESISPATH}/${Genesis}")) {
                        sh "curl -o ${GENESISPATH}/${Genesis} https://download.fantom.network/${Genesis}"
                    }
                }
            }
        }

        stage('Create DB from legacy genesis') {
           steps {
               // create db from a legacy genesis file
                sh "./build/sonictool --datadir ${DATADIRPATH} genesis --experimental ${GENESISPATH}/${Genesis}"
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
                // copy db for import events
                sh "cp -r ${DATADIRPATH} ${EVENTDBPATH}"
            }
        }

        stage('Synchronize blockchain for 100 epoches') {
            steps {
                sh "./build/sonicd --datadir ${DATADIRPATH} --exitwhensynced.epoch 5677"
            }
        }

        stage('Export & import events') {
            steps {
                sh "./build/sonictool --datadir ${DATADIRPATH} export events ${DATAROOTPATH}/sonic.events"
                sh "./build/sonictool --datadir ${EVENTDBPATH} import events ${DATAROOTPATH}/sonic.events"
                sh "./build/sonictool --datadir ${EVENTDBPATH} check live"
            }
        }

        stage('Continue synchronize event-imported DB') {
            steps {
                sh "./build/sonicd --datadir ${EVENTDBPATH} --exitwhensynced.epoch 5777"
                sh "./build/sonictool --datadir ${EVENTDBPATH} check live"
            }
        }

        stage('Export & import genesis') {
            steps {
                sh "./build/sonictool --datadir ${DATADIRPATH} export genesis ${DATAROOTPATH}/sonic.g"
                sh "./build/sonictool --datadir ${GENESISDBPATH} genesis --experimental ${DATAROOTPATH}/sonic.g"
                sh "./build/sonictool --datadir ${GENESISDBPATH} check live"
            }
        }

        stage('Continue synchronize genesis-imported DB') {
            steps {
                sh "./build/sonicd --datadir ${GENESISDBPATH} --exitwhensynced.epoch 5777"
                sh "./build/sonictool --datadir ${GENESISDBPATH} check live"
            }
        }

        stage('Teardown') {
            // teardown
            steps {
                sh "make clean"
                sh "rm -rf ${DATAROOTPATH}"
            }
        }
    }
    /*
    post {
        always {
            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}")
            ]
        }
    }
    */
}
