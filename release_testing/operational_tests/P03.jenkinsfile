// P03 performs end-to-end test synchronizing from the first opera block to the current head

def genesisUrl
def genesis

pipeline {
    agent { node "x86-4-32-m" }

    options {
        timestamps ()
        timeout(time: 2, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
        DATAROOTPATH="/mnt/tmp-disk/tooltmp"
        DATADIRPATH="${DATAROOTPATH}/sonic"
        GENESISPATH="/mnt/tmp-disk/genesis"
        GENESISURL="https://download.fantom.network"
        GENESISDEFAULT="mainnet-latest-validator.g"
    }

    parameters {
        string(defaultValue: "", description: 'Name of the genesis file to download', name: 'Genesis')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'SonicVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'LaScalaVersion')
    }

    stages {
        stage('Checkout and build') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )

                dir('lascala') {
                    checkout scmGit(
                        branches: [[name: "${LaScalaVersion}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Fantom-foundation/LaScala.git'
                        ]]
                    )
                }

                sh "make"
            }
        }

        stage('Preparation') {
            steps {
                // setup
                sh "mkdir -p $GENESISPATH"

                script {
                    genesisUrl = GENESISURL
                    genesis = GENESISDEFAULT

                    if (!params.Genesis.isEmpty() && params.Genesis != GENESISDEFAULT) {
                        genesisUrl = GENESISURL + "/opera/mainnet"
                        genesis = params.Genesis
                    }

                    // remove old md5
                    sh "rm -f ${GENESISPATH}/${genesis}.md5"

                    // download genesis
                    if (!fileExists("${GENESISPATH}/${genesis}")) {
                        sh "wget ${genesisUrl}/${genesis} -O ${GENESISPATH}/${genesis} -nv"
                    }

                    // download MD5
                    sh "wget ${genesisUrl}/${genesis}.md5 -O ${GENESISPATH}/${genesis}.md5 -nv"
                    def md5Expected = sh(script: "cat ${GENESISPATH}/${genesis}.md5", returnStdout: true);

                    String md5ExpectedHash = md5Expected.substring(0, md5Expected.lastIndexOf(' '));

                    // calculate MD5
                    def genesisMd5 = sh(script: "md5sum ${GENESISPATH}/${genesis}", returnStdout: true);

                    String md5CalculatedHash = genesisMd5.substring(0, genesisMd5.lastIndexOf(' '));

                    sh "echo ${md5ExpectedHash}"
                    sh "echo ${md5CalculatedHash}"

                    // compare MD5
                    if (md5ExpectedHash.trim() != md5CalculatedHash.trim()) {
                        sh "echo removing corrupted file ${GENESISPATH}/${genesis}"
                        sh "rm ${GENESISPATH}/${genesis}"
                        currentBuild.result = 'FAILURE'
                        error("Error hash mismatch: got ${md5CalculatedHash}, expected got ${md5ExpectedHash}")
                    } else {
                        sh "echo hash ${md5CalculatedHash} confirmed"
                    }
                }
            }
        }

        stage('Create DB from genesis') {
           steps {
               // create db from a genesis file
                sh "./build/sonictool --datadir ${DATADIRPATH} genesis --experimental ${GENESISPATH}/${genesis} "
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
            }
        }

        stage('Synchronization') {
            steps {
                sh "./build/sonicd --datadir ${DATADIRPATH} --verbosity 2 --exitwhensynced.age 1s"
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
