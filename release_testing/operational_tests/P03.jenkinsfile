// P03 performs end-to-end test synchronizing from the first block to the current head on chosen network

// Global variables
def genesis
def genesisUrl
def configFile
def additionalFlags

pipeline {
    agent { node "x86-4-32-m" }

    options {
        timestamps ()
        timeout(time: 2, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
        DATAROOTPATH="/mnt/tmp-disk/tooltmp"
        DATADIRPATH="${DATAROOTPATH}/sonic"
        GENESISPATH="/mnt/tmp-disk/genesis"
        GENESISMAINNETURL="https://download.fantom.network"
        GENESISMAINNET="mainnet-latest-validator.g"
        GENESISTESTNETURL="https://download.fantom.network/builders"
        GENESISTESTNET="builders-36960.g"
        GENESISDEVNETURL="https://storage.googleapis.com/sonic-snapshots/devnet"
        GENESISDEVNET="genesis.json"
        DEVNETCONFIGURL="https://storage.googleapis.com/sonic-snapshots/devnet/config.toml"
    }

    parameters {
        string(
            name: 'SonicVersion',
            defaultValue: "develop",
            description: 'Branch or commit hash for Sonic'
        )
        string(
            name: 'LaScalaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for LaScala'
        )
        choice(
            name: 'Network',
            choices: ['Devnet', 'Opera mainnet', 'Opera testnet'],
            description: 'Blockchain network to test on'
        )
    }

    stages {
        stage('Checkout and build') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )

                dir('lascala') {
                    checkout scmGit(
                        branches: [[name: "${LaScalaVersion}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Fantom-foundation/LaScala.git'
                        ]]
                    )
                }

                sh "make"
            }
        }

        stage('Network setup and preparation') {
            steps {
                sh "rm -rf $GENESISPATH"
                sh "mkdir -p $GENESISPATH"
                sh "mkdir -p $DATAROOTPATH"

                script {
                    switch(params.Network) {
                      case 'Opera mainnet':
                        genesis = GENESISMAINNET
                        genesisUrl = GENESISMAINNETURL
                        configFile = ''
                        additionalFlags = '--lachesis.suppress-frame-panic'
                        break
                      case 'Opera testnet':
                        genesis = GENESISTESTNET
                        genesisUrl = GENESISTESTNETURL
                        configFile = '--config lascala/utils/sonic-config-testnet.toml'
                        additionalFlags = '--lachesis.suppress-frame-panic'
                        break
                      case 'Devnet':
                        genesis = GENESISDEVNET
                        genesisUrl = GENESISDEVNETURL
                        configFile = "--config $DATAROOTPATH/sonic-devnet.toml"
                        additionalFlags = ''

                        // download devnet config
                        sh "wget $DEVNETCONFIGURL -O $DATAROOTPATH/sonic-devnet.toml -nv"
                        break
                      default:
                        genesis = GENESISMAINNET
                        genesisUrl = GENESISMAINNETURL
                        configFile = ''
                        additionalFlags = '--lachesis.suppress-frame-panic'
                        break
                    }
                }
            }
        }

        stage('Genesis download and verification') {
            steps {
                script {
                    // download genesis
                    sh "wget ${genesisUrl}/${genesis} -O ${GENESISPATH}/${genesis} -nv"

                    if (params.Network != "Devnet") {
                        // download MD5
                        sh "wget ${genesisUrl}/${genesis}.md5 -O ${GENESISPATH}/${genesis}.md5 -nv"
                        def md5Expected = sh(script: "cat ${GENESISPATH}/${genesis}.md5", returnStdout: true);

                        String md5ExpectedHash = md5Expected.substring(0, md5Expected.lastIndexOf(' '));

                        // calculate MD5
                        def genesisMd5 = sh(script: "md5sum ${GENESISPATH}/${genesis}", returnStdout: true);

                        String md5CalculatedHash = genesisMd5.substring(0, genesisMd5.lastIndexOf(' '));

                        sh "echo ${md5ExpectedHash}"
                        sh "echo ${md5CalculatedHash}"

                        // compare MD5
                        if (md5ExpectedHash.trim() != md5CalculatedHash.trim()) {
                            sh "echo removing corrupted file ${GENESISPATH}/${genesis}"
                            sh "rm ${GENESISPATH}/${genesis}"
                            currentBuild.result = 'FAILURE'
                            error("Error hash mismatch: got ${md5CalculatedHash}, expected got ${md5ExpectedHash}")
                        } else {
                            sh "echo hash ${md5CalculatedHash} confirmed"
                        }
                    }
                }
            }
        }

        stage('Create DB from genesis') {
           steps {
               // create db from a genesis file
                sh "./build/sonictool --datadir ${DATADIRPATH} genesis ${params.Network == 'Devnet' ? 'json' : ''} --experimental ${GENESISPATH}/${genesis}"
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
            }
        }

        stage('Synchronization and check') {
            steps {
                sh """./build/sonicd \
                            --datadir ${DATADIRPATH} \
                            --verbosity 2 \
                            --exitwhensynced.age 1s \
                            ${additionalFlags} \
                            ${configFile}"""
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
            }
        }

        stage('Teardown') {
            steps {
                sh "make clean"
                sh "rm -rf ${DATAROOTPATH}"
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
