// P03 performs end-to-end test synchronizing from the first opera block to the current head

pipeline {
    agent { node "db-small-ssd" }

    options {
        timestamps ()
        timeout(time: 2, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOROOT = '/usr/lib/go-1.21/'
        DATAROOTPATH="/mnt/tmp-disk/tooltmp"
        DATADIRPATH="${DATAROOTPATH}/sonic"
        GENESISPATH="/mnt/tmp-disk/genesis"
    }

    parameters {
        string(defaultValue: "testnet-25100-rpc.g", description: 'Name of the genesis file to download', name: 'Genesis')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'SonicVersion')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )
            }
        }

        stage('Preparation and build') {
            steps {
                // setup
                sh "rm -f ${GENESISPATH}/${Genesis}.md5"
                sh "mkdir -p $GENESISPATH"
                sh "make"

                // download genesis
                script {
                    if (!fileExists("${GENESISPATH}/${Genesis}")) {
                        sh "curl -o ${GENESISPATH}/${Genesis} https://download.fantom.network/${Genesis}"
                    }

                    // download MD5
                    md5url = "https://download.fantom.network/${Genesis}.md5"
                    sh "echo ${md5url}"

                    def md5Expected = sh(script: "curl ${md5url}", returnStdout: true);
                    String md5ExpectedHash = md5Expected.substring(0, md5Expected.lastIndexOf(' '));

                    // calculate MD5
                    String genesisPath = "${GENESISPATH}/${Genesis}"
                    def genesisMd5 = sh(script: "md5sum $genesisPath", returnStdout: true);
                    String md5CalculatedHash = genesisMd5.substring(0, genesisMd5.lastIndexOf(' '));

                    // compare MD5
                    if (md5ExpectedHash.trim() != md5CalculatedHash.trim()) {
                        sh "echo removing corrupted file ${GENESISPATH}/${Genesis}"
                        sh "rm ${GENESISPATH}/${Genesis}"
                        currentBuild.result = 'FAILURE'
                        error("Error hash mismatch: got ${md5CalculatedHash}, expected got ${md5ExpectedHash}")
                    } else {
                        sh "echo hash ${md5CalculatedHash} confirmed"
                    }
                }

            }
        }

        stage('Create DB from legacy genesis') {
           steps {
               // create db from a legacy genesis file
                sh "./build/sonictool --datadir ${DATADIRPATH} genesis --experimental ${GENESISPATH}/${Genesis} "
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
            }
        }

        stage('Synchronization') {
            steps {
                sh "./build/sonicd --datadir ${DATADIRPATH} --exitwhensynced.age 1s"
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
            }
        }
    }

    /*
    post {
        always {
            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}")
            ]
        }
    }
    */
}
