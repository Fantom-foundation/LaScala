pipeline {
    agent {label 'release'}

    parameters {
        string(name: 'TmpDb', defaultValue: '/var/data/Aida/statedb', description: 'Temporary directory to store the state DB.')
        string(name: 'AidaDb', defaultValue: '/var/src/Aida/mainnet-data/aida-db', description: 'Temporary directory to read Aida DB from.')
        string(name: 'FirstBlockHeight', defaultValue: '5000000', description: 'First block height to import.')
        string(name: 'SecondBlockHeight', defaultValue: '6000000', description: 'Second block height to import.')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
    }

    stages {
        stage('Redirect to SyncToolchain') {
            steps {
                build job: '/ReleaseTesting/Carmen/SyncToolchain', parameters: [
                    string(name: 'nodeLabel', value: "release"),
                    string(name: 'tmpDb', value: "/var/data/Aida/statedb"),
                    string(name: 'aidaDb', value: "/var/src/Aida/mainnet-data/aida-db"),
                    string(name: 'firstBlockHeight', value: "5000000"),
                    string(name: 'secondBlockHeight', value: "6000000"),
                    string(name: 'aidaVersion', value: "${AidaVersion}"),
                    string(name: 'carmenVersion', value: "${CarmenVersion}")
                ]
            }
        }
    }
    post {
        always {
            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}")

            ]
        }
    }
}