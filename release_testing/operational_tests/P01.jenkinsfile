pipeline {
    agent {label 'release'}

    parameters {
        string(name: 'TmpDb', defaultValue: '/var/data/Aida/statedb', description: 'Temporary directory to store the state DB.')
        string(name: 'AidaDb', defaultValue: '/var/src/Aida/mainnet-data/aida-db', description: 'Temporary directory to read Aida DB from.')
        string(name: 'FirstBlockHeight', defaultValue: '5000000', description: 'First block height to import.')
        string(name: 'SecondBlockHeight', defaultValue: '6000000', description: 'Second block height to import.')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[
                        credentialsId:  'AidaCI_PAT',
                        url: 'https://github.com/Fantom-foundation/Aida.git'
                    ]]
                )
                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[
                            credentialsId:  'AidaCI_PAT', 
                            url: 'https://github.com/Fantom-foundation/Carmen.git'
                        ]]
                	)
                }

                sh "git submodule update --recursive"
            }
        }

        stage('Build') {
            steps {
                build job: '/ReleaseTesting/Carmen/SyncToolchain', parameters: [
                    string(name: 'TmpDb', value: "/var/data/Aida/statedb"),
                    string(name: 'AidaDb', value: "/var/src/Aida/mainnet-data/aida-db"),
                    string(name: 'FirstBlockHeight', value: "5000000"),
                    string(name: 'SecondBlockHeight', value: "6000000"),
                    string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                    string(name: 'CarmenVersion', value: "${CARMEN_VERSION}")
                ]
            }
        }
    }
    post {
        always {
            sh "make clean"

            build job: '/Notifications/slack-notification-pipeline', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "lubo")

            ]
        }
    }
}