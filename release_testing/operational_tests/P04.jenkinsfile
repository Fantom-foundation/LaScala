// P04 performs end-to-end test synchronizing from genesis to the head of the chain, test runs artificial RPC requests adn compare block receipts

pipeline {
    agent { node "${params.Agent}" }

    options {
        timestamps ()
        timeout(time: 3, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
        SONICSTATEDB = ''
        OPTIONS = ''
    }

    parameters {
        string(
            name: 'SonicVersion',
            defaultValue: "develop",
            description: 'Branch or commit hash for Sonic'
        )
        string(
            name: 'LaScalaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for LaScala'
        )
        string(
            //default agent for devnet. For mainnet, use x86-4-32-archive
            name: 'Agent',
            defaultValue: 'x86-4-32-m',
            description: 'Agent label to run the job. For Opera mainnet, use x86-4-32-archive.'
        )
        string(
            name: 'ReferentialUrl',
            defaultValue: "",
            description: 'URL address of referential Sonic node'
        )
        choice(
            name: 'Network',
            choices: ['Sonic devnet', 'Opera mainnet'],
            description: 'Network to test'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )

                dir('lascala') {
                    checkout scmGit(
                        branches: [[name: "${LaScalaVersion}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Fantom-foundation/LaScala.git'
                        ]]
                    )
                }
            }
        }

        stage('Configure & Build') {
            steps {
                sh 'make'

                script {
                    // resume from an existing statedb
                    if ("${Network}" == 'Opera mainnet') {
                        SONICSTATEDB = '/mnt/sonic-statedb/mainnet'
                        OPTIONS = '--lachesis.suppress-frame-panic'
                    // needs genesis and config files
                    } else if ("${Network}" == 'Sonic devnet') {
                        // variables
                        def tmppath = '/mnt/tmp-disk/'
                        def genesispath = "${tmppath}/genesis.json"
                        def tomlpath = "${tmppath}/sonic-devnet.toml"

                        SONICSTATEDB = "${tmppath}/sonic"
                        OPTIONS = "--config ${tomlpath}"

                        // download genesis and config files
                        sh "wget -O ${genesispath} https://storage.googleapis.com/sonic-snapshots/devnet/genesis.json"
                        sh "wget -O ${tomlpath} https://storage.googleapis.com/sonic-snapshots/devnet/config.toml"

                        // prepare stateDb from genesis
                        sh "rm -rf ${SONICSTATEDB}"
                        sh """./build/sonictool --datadir ${SONICSTATEDB} \
                            genesis json ${genesispath} \
                            --experimental --mode rpc"""
                    } else {
                        error 'Invalid network'
                    }
                }
            }
        }


        stage('Synchronization') {
            steps {
                sh "./build/sonicd --datadir ${SONICSTATEDB} --verbosity 2 --exitwhensynced.age 1s ${OPTIONS}"
            }
        }

        stage('Parallel execution') {
            parallel {
                stage('Start RPC node') {
                    steps {
                        sh "echo 'Start RPC node'"

                        sh "sudo setcap 'cap_net_bind_service=+ep' ./build/sonicd"

                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                            sh """timeout 20m ./build/sonicd \
                                --mode=rpc \
                                --datadir=${SONICSTATEDB} \
                                --port=5050 \
                                --cache=65536 \
                                --maxpeers=251 \
                                --verbosity=2 \
                                --metrics --pprof \
                                --ws \
                                --ws.addr=0.0.0.0 \
                                --ws.port=18546 \
                                --ws.origins="*" \
                                --ws.api=eth,web3,net,ftm,txpool,abft,dag \
                                --http \
                                --http.addr=127.0.0.1 \
                                --http.port=80 \
                                --http.corsdomain="*" \
                                --http.vhosts="*" \
                                --http.api=eth,web3,net,ftm,txpool,abft,dag \
                                ${OPTIONS}"""
                        }
                    }
                }

                stage('Iterate RPC requests') {
                    steps {
                        sleep(time:180,unit:"SECONDS")

                        sh 'echo "Start RPC request iteration"'

                        dir('lascala/utils') {
                            sh 'python3 rpc-requests.py'
                        }
                    }
                }

                stage('Compare block receipts') {
                    steps {
                        sleep(time:180,unit:"SECONDS")

                        sh 'echo "Start comparing block receipts"'

                        script {
                            def referentialUrl

                            if (params.ReferentialUrl == '') {
                                if (params.Network == 'Sonic devnet') {
                                    referentialUrl = 'http://34.56.203.77:80'
                                } else if (params.Network == 'Opera mainnet') {
                                    referentialUrl = 'http://10.128.0.10'
                                }
                            } else {
                                referentialUrl = params.ReferentialUrl
                            }

                            dir('lascala/utils') {
                                sh 'chmod +x ./test_getBlockReceipts.sh'
                                sh "./test_getBlockReceipts.sh http://127.0.0.1 ${referentialUrl}"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.durationString}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
