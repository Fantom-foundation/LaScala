// P04 performs end-to-end test synchronizing from genesis to the head of the chain, test runs artificial RPC requests adn compare block receipts

pipeline {
    agent { node 'x86-4-32-m' }

    options {
        timestamps ()
        timeout(time: 1, unit: 'DAYS')
        disableConcurrentBuilds(abortPrevious: false)
    }

    environment {
        GOGC = '50'
        GOMEMLIMIT = '28GiB'
        DATAROOTPATH="/mnt/tmp-disk/tooltmp"
        DATADIRPATH="${DATAROOTPATH}/sonic"
        GENESISPATH = "${DATAROOTPATH}/genesis"

        // genesis download url
        GENESISURL = ''
        GENESISFILE = 'genesis.json'
    }

    parameters {
        string(
            name: 'SonicVersion',
            defaultValue: 'main',
            description: 'Branch or commit hash for Sonic'
        )
        string(
            name: 'LaScalaVersion',
            defaultValue: "main",
            description: 'Branch or commit hash for LaScala'
        )
        string(
            name: 'ReferentialUrl',
            defaultValue: "",
            description: 'URL address of referential Sonic node'
        )
        choice(
            name: 'Network',
            choices: ['Sonic mainnet', 'Blaze testnet'],
            description: 'Network to test'
        )
    }

    stages {
        stage('Checkout and build') {
            steps {
                checkout scmGit(
                    branches: [[name: "${SonicVersion}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Fantom-foundation/Sonic.git'
                    ]]
                )

                dir('lascala') {
                    checkout scmGit(
                        branches: [[name: "${LaScalaVersion}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Fantom-foundation/LaScala.git'
                        ]]
                    )
                }

                sh "make"
            }
        }

        // This stage sets genesis download url for the chosen network,
        // and also download the configuration file if needed.
        stage('Configure Network Parameters') {
            steps{
                script {
                    if ("${Network}" == "Sonic mainnet") {
                        echo 'Target network: Sonic mainnet'
                        GENESISURL = 'https://genesis.soniclabs.com/latest-blaze-full.g'
                        GENESISFILE = 'sonic.g'
                    } else if ("${Network}" == "Blaze testnet") {
                        echo 'Target network: Blaze testnet'
                        GENESISURL = 'https://genesis.soniclabs.com/latest-blaze-full.g'
                        GENESISFILE = 'blaze.g'
                    }
                }
            }
        }

        stage('Genesis download and verification') {
            steps {
                // setup
                sh "mkdir -p $GENESISPATH"

                // download genesis
                script {
                    sh "wget -O ${GENESISPATH}/${GENESISFILE} ${GENESISURL} -nv"

                    // download MD5
                    sh "wget -O ${GENESISPATH}/${GENESISFILE}.md5 ${GENESISURL}.md5 -nv"
                    def md5Expected = sh(script: "cat ${GENESISPATH}/${GENESISFILE}.md5", returnStdout: true);

                    String md5ExpectedHash = md5Expected.substring(0, md5Expected.lastIndexOf(' '));

                    // calculate MD5
                    def genesisMd5 = sh(script: "md5sum ${GENESISPATH}/${GENESISFILE}", returnStdout: true);

                    String md5CalculatedHash = genesisMd5.substring(0, genesisMd5.lastIndexOf(' '));

                    echo "${md5ExpectedHash}"
                    echo "${md5CalculatedHash}"

                    // compare MD5
                    if (md5ExpectedHash.trim() != md5CalculatedHash.trim()) {
                        sh "echo removing corrupted file ${GENESISPATH}/${GENESISFILE}"
                        sh "rm ${GENESISPATH}/${GENESISFILE}"
                        currentBuild.result = 'FAILURE'
                        error("Error hash mismatch: got ${md5CalculatedHash}, expected got ${md5ExpectedHash}")
                    } else {
                        sh "echo hash ${md5CalculatedHash} confirmed"
                    }
                }
            }
        }

        stage('Create DB from genesis') {
           steps {
               // create db from a genesis file
                sh "./build/sonictool --datadir ${DATADIRPATH} genesis --experimental ${GENESISPATH}/${GENESISFILE}"
                sh "./build/sonictool --datadir ${DATADIRPATH} check live"
            }
        }

        stage('Synchronization') {
            steps {
                sh "./build/sonicd --datadir ${DATADIRPATH} --verbosity 2 --exitwhensynced.age 1s"
            }
        }

        stage('Parallel execution') {
            parallel {
                stage('Start RPC node') {
                    steps {
                        echo 'Start RPC node'

                        sh "sudo setcap 'cap_net_bind_service=+ep' ./build/sonicd"

                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                            sh """timeout 240m ./build/sonicd \
                                --mode=rpc \
                                --datadir=${DATADIRPATH} \
                                --port=5050 \
                                --cache=65536 \
                                --maxpeers=251 \
                                --verbosity=2 \
                                --metrics --pprof \
                                --ws \
                                --ws.addr=0.0.0.0 \
                                --ws.port=18546 \
                                --ws.origins="*" \
                                --ws.api=eth,web3,net,ftm,txpool,abft,dag \
                                --http \
                                --http.addr=127.0.0.1 \
                                --http.port=80 \
                                --http.corsdomain="*" \
                                --http.vhosts="*" \
                                --http.api=eth,web3,net,ftm,txpool,abft,dag"""
                        }
                    }
                }

                stage('RPC request tests') {
                    steps {
                        // wait for the node to start and catch up with the network
                        sleep(time:180,unit:"SECONDS")

                        // Test 1: RPC reponses match expected patterns
                        echo 'Start RPC request iteration'
                        dir('lascala/utils') {
                            sh 'python3 rpc-requests.py'
                        }

                        // Test 2: Compare block receipts to referential node
                        echo 'Start comparing block receipts'

                        script {
                            String referentialUrl = params.ReferentialUrl

                            // official RPC urls
                            if (referentialUrl == '') {
                                if (params.Network == 'Sonic mainnet') {
                                    referentialUrl = 'https://rpc.sonic.soniclabs.com'
                                } else if (params.Network == 'Blaze testnet') {
                                    referentialUrl = 'https://rpc.blaze.soniclabs.com'
                                }
                            }

                            dir('lascala/utils') {
                                sh 'chmod +x ./test_getBlockReceipts.sh'
                                sh "./test_getBlockReceipts.sh http://127.0.0.1 ${referentialUrl}"
                            }
                        }

                        // Stop sonicd
                        echo 'Stop sonic'
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                            sh 'pkill -f sonicd'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.durationString}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
