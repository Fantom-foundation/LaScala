// Master job for running release candidate tests in parallel

pipeline {
    agent { label 'coordinator' }

    environment {
        AIDA_VERSION = ''
        CARMEN_VERSION  = ''
        TOSCA_VERSION = ''
        SONIC_VERSION = ''
        LACHESIS_BASE_SONIC_VERSION = ''
        GO_ETHEREUM_SONIC_VERSION = ''
        LASCALA_VERSION = ''
    }

    parameters {
        string(
            name: 'BlockFrom',
            defaultValue: "first",
            description: 'Starting block'
        )
        string(
            name: 'BlockTo',
            defaultValue: "last",
            description: 'End block'
        )
        string(
            name: 'AidaVersion',
            defaultValue: "main",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'CarmenVersion',
            defaultValue: "main",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'ToscaVersion',
            defaultValue: "main",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'NormaVersion',
            defaultValue: "main",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'SonicVersion',
            defaultValue: "develop",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'GoEthereumSonicVersion',
            defaultValue: "eth1.14.8",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'LachesisBaseSonicVersion',
            defaultValue: "main",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'LaScalaVersion',
            defaultValue: "main",
            description: 'Can be either branch name or commit hash.'
        )
        string(
            name: 'Genesis',
            defaultValue: "mainnet-latest-validator.g",
            description: 'Name of the genesis file to download'
        )
        booleanParam(
            name: 'RunF01',
            defaultValue: true,
            description: 'If checked, F01 stage will be executed'
        )
        booleanParam(
            name: 'RunF02',
            defaultValue: true,
            description: 'If checked, F02 stage will be executed'
        )
        booleanParam(
            name: 'RunF03',
            defaultValue: true,
            description: 'If checked, F03 stage will be executed'
        )
        booleanParam(
            name: 'RunF04',
            defaultValue: true,
            description: 'If checked, F04 stage will be executed'
        )
        booleanParam(
            name: 'RunF05',
            defaultValue: true,
            description: 'If checked, F05 stage will be executed'
        )
        booleanParam(
            name: 'RunF06',
            defaultValue: true,
            description: 'If checked, F06 stage will be executed'
        )
        booleanParam(
            name: 'RunF07',
            defaultValue: true,
            description: 'If checked, F07 stage will be executed'
        )
        booleanParam(
            name: 'RunF08',
            defaultValue: true,
            description: 'If checked, F08 stage will be executed'
        )
        booleanParam(
            name: 'RunF09',
            defaultValue: true,
            description: 'If checked, F09 stage will be executed'
        )
        booleanParam(
            name: 'RunF10',
            defaultValue: true,
            description: 'If checked, F10 stage will be executed'
        )
        booleanParam(
            name: 'RunF11',
            defaultValue: true,
            description: 'If checked, F11 stage will be executed'
        )
        booleanParam(
            name: 'RunF12',
            defaultValue: true,
            description: 'If checked, F12 stage will be executed'
        )
        booleanParam(
            name: 'RunF13',
            defaultValue: true,
            description: 'If checked, F13 stage will be executed'
        )
        booleanParam(
            name: 'RunF14',
            defaultValue: true,
            description: 'If checked, F14 stage will be executed'
        )
        booleanParam(
            name: 'RunF15',
            defaultValue: true,
            description: 'If checked, F15 stage will be executed'
        )
        booleanParam(
            name: 'RunF16',
            defaultValue: true,
            description: 'If checked, F16 stage will be executed'
        )
        booleanParam(
            name: 'RunF17',
            defaultValue: true,
            description: 'If checked, F17 stage will be executed'
        )
        booleanParam(
            name: 'RunF18',
            defaultValue: true,
            description: 'If checked, F18 stage will be executed'
        )
        booleanParam(
            name: 'RunF19',
            defaultValue: true,
            description: 'If checked, F19 stage will be executed'
        )
        booleanParam(
            name: 'RunN01',
            defaultValue: true,
            description: 'If checked, N01 stage will be executed'
        )
        booleanParam(
            name: 'RunN02',
            defaultValue: true,
            description: 'If checked, N02 stage will be executed'
        )
        booleanParam(
            name: 'RunN03',
            defaultValue: false,
            description: 'If checked, N03 stage will be executed'
        )
        booleanParam(
            name: 'RunN04',
            defaultValue: true,
            description: 'If checked, N04 stage will be executed'
        )
        booleanParam(
            name: 'RunP01',
            defaultValue: true,
            description: 'If checked, P01 stage will be executed'
        )
        booleanParam(
            name: 'RunP02',
            defaultValue: true,
            description: 'If checked, P02 stage will be executed'
        )
        booleanParam(
            name: 'RunP03',
            defaultValue: true,
            description: 'If checked, P03 stage will be executed'
        )
        booleanParam(
            name: 'RunP04',
            defaultValue: true,
            description: 'If checked, P04 stage will be executed'
        )
        booleanParam(
            name: 'RunP05',
            defaultValue: true,
            description: 'If checked, P05 stage will be executed'
        )
        booleanParam(
            name: 'RunP06',
            defaultValue: true,
            description: 'If checked, P06 stage will be executed'
        )
        booleanParam(
            name: 'RunP07',
            defaultValue: true,
            description: 'If checked, P07 stage will be executed'
        )
    }

    stages {
        stage('Get last commit sha') {
            steps {
                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[url: "https://github.com/Fantom-foundation/Aida.git"]]
                )

                script {
                   AIDA_VERSION = sh (
                        script: 'git log -1 --pretty=format:"%H"',
                        returnStdout: true
                    ).trim()
                    echo "Aida branch last commit id: ${AIDA_VERSION}"
                }

                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)

                    script {
                       CARMEN_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Carmen branch last commit id: ${CARMEN_VERSION}"
                    }
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )

                    script {
                       TOSCA_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Tosca branch last commit id: ${TOSCA_VERSION}"
                    }
                }

                dir('sonic') {
                    checkout scmGit(
                        branches: [[name: "${SonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
                    )

                    script {
                       SONIC_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Sonic branch last commit id: ${SONIC_VERSION}"
                    }
                }

                dir('lachesis-base-sonic') {
                    checkout scmGit(
                        branches: [[name: "${LachesisBaseSonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/lachesis-base-sonic.git']]
                    )

                    script {
                       LACHESIS_BASE_SONIC_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Lachesis-base-sonic branch last commit id: ${LACHESIS_BASE_SONIC_VERSION}"
                    }
                }

                dir('go-ethereum-sonic') {
                    checkout scmGit(
                        branches: [[name: "${GoEthereumSonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/go-ethereum-sonic.git']]
                    )

                    script {
                       GO_ETHEREUM_SONIC_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Go-ethereum-sonic branch last commit id: ${GO_ETHEREUM_SONIC_VERSION}"
                    }
                }

                dir('lascala') {
                    checkout scmGit(
                        branches: [[name: "${LaScalaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/LaScala.git']]
                    )

                    script {
                       LASCALA_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "LaScala branch last commit id: ${LASCALA_VERSION}"
                    }
                }
            }
        }

        stage('Start parallel stage execution') {
            parallel {
                stage('F01 block processing (testnet)') {
                    when {
                        expression {
                            return params.RunF01;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F01', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('F02 block processing (mainnet)') {
                    when {
                        expression {
                            return params.RunF02;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F02/master', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('F03 RPC node simulation (testnet)') {
                    when {
                        expression {
                            return params.RunF03;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F03', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'ArchiveQueryRate', value: "200"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('F04 RPC node simulation (mainnet)') {
                    when {
                        expression {
                            return params.RunF04;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F04', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'ArchiveQueryRate', value: "200"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('F05 RPC request processing (mainnet)') {
                    when {
                        expression {
                            return params.RunF05;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F05', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}"),
                            string(name: 'RpcRecording', value: "api-recording-2023-05-19_11-36.gz")
                        ]
                    }
                }

                stage('F06 Syntactic transactions') {
                    when {
                        expression {
                            return params.RunF06;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F06', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('F07 Ethereum State Tests') {
                    when {
                        expression {
                            return params.RunF07;
                        }
                    }
                    steps {
                        build job: '/Sonic/Aida-Geth-State-Tests', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('F08 Carmen stress test') {
                    when {
                        expression {
                            return params.RunF08;
                        }
                    }
                    steps {
                        build job: '/Carmen/Stress-tests-tool', parameters: [
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'Blocks', value: "100000")
                        ]
                    }
                }

                stage('F09 Carmen Unit and Integration Tests') {
                    when {
                        expression {
                            return params.RunF09;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F09', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}")
                        ]
                    }
                }

                stage('F10 Carmen DB heal') {
                    when {
                        expression {
                            return params.RunF10;
                        }
                    }
                    steps {
                        build job: '/Carmen/Validate-Db-Heal', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'NumberOfIterations', value: "1000"),
                            string(name: 'Window', value: "1"),
                            string(name: 'CheckpointGranularity', value: "1")
                        ]
                    }
                }

                stage('F11 Carmen verification of witness proof') {
                    when {
                        expression {
                            return params.RunF11;
                        }
                    }
                    steps {
                        build job: '/Carmen/Validate-Witness-Proof', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'Blocks', value: "5000000")
                        ]
                    }
                }

                stage('F12 Sonic and go-ethereum-sonic Unit Tests') {
                    when {
                        expression {
                            return params.RunF12;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F12', parameters: [
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}"),
                            string(name: 'GoEthereumSonicVersion', value: "${GO_ETHEREUM_SONIC_VERSION}")
                        ]
                    }
                }

                stage('F13 Lachesis-base-sonic unit tests') {
                    when {
                        expression {
                            return params.RunF13;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F13', parameters: [
                            string(name: 'LachesisBaseSonicVersion', value: "${LACHESIS_BASE_SONIC_VERSION}")
                        ]
                    }
                }

                stage('F14 - Tosca unit and race detection tests') {
                    steps {
                        build job: '/Tosca/Race Detection Unit Tests', parameters: [
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }

                stage('F15 Validate LFVM on opera testnet substate') {
                    when {
                        expression {
                            return params.RunF15;
                        }
                    }
                    steps {
                        build job: '/Tosca/Validate-LFVM', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SubstateDB', value: "/mnt/aida-db-testnet/aida-db"),
                            string(name: 'ChainID', value: "4002")
                        ]
                    }
                }

                stage('F16 Validate LFVM on opera mainnet substate') {
                    when {
                        expression {
                            return params.RunF16;
                        }
                    }
                    steps {
                        build job: '/Tosca/Validate-LFVM', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SubstateDB', value: "/mnt/aida-db-mainnet/aida-db"),
                            string(name: 'ChainID', value: "250")
                        ]
                    }
                }

                stage('F17 Validate LFVM on ethereum mainnet substate') {
                    when {
                        expression {
                            return params.RunF17;
                        }
                    }
                    steps {
                        build job: '/Tosca/Validate-LFVM-Ethereum', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }

                stage('F18 Ethereum block processing') {
                    when {
                        expression {
                            return params.RunF18;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F18', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('F19 - Tosca LFVM conformance tests') {
                    when {
                        expression {
                            return params.RunF19;
                        }
                    }
                    steps {
                        build job: '/Tosca/Conformance Tests lfvm', parameters: [
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'TargetInterpreter', value: "lfvm"),
                            booleanParam(name: 'FullMode', value: true)
                        ]
                    }
                }

                stage('N01 block processing (mainnet)') {
                    when {
                        expression {
                            return params.RunN01;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/NonfunctionalTests/N01', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('N02 block processing with archive-db') {
                    when {
                        expression {
                            return params.RunN02;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/NonfunctionalTests/N02', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('N03 RPC node simulation (mainnet)') {
                    when {
                        expression {
                            return params.RunN03;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/NonfunctionalTests/N03', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'ArchiveQueryRate', value: "150"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }


                stage('N04 RPC request processing (mainnet)') {
                    when {
                        expression {
                            return params.RunN04;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/NonfunctionalTests/N04', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}"),
                            string(name: 'RpcRecording', value: "api-recording-2023-05-19_11-36.gz")
                        ]
                    }
                }

                stage('P01 Norma') {
                    when {
                        expression {
                            return params.RunP01;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P01', parameters: [
                            string(name: 'NormaVersion', value: "${NormaVersion}"),
                        ]
                    }
                }

                stage('P02 Sonic Genesis Tests') {
                    when {
                        expression {
                            return params.RunP02;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P02', parameters: [
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('P03 Sonic Synchronization Test') {
                    when {
                        expression {
                            return params.RunP03;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P03', parameters: [
                            string(name: 'Genesis', value: "${Genesis}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}"),
                            string(name: 'LaScalaVersion', value: "${LASCALA_VERSION}")
                        ]
                    }
                }

                stage('P04 Sonic RPC Test') {
                    when {
                        expression {
                            return params.RunP04;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P04', parameters: [
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}"),
                            string(name: 'LaScalaVersion', value: "${LASCALA_VERSION}")
                        ]
                    }
                }

                stage('P05 Sonic Official Testnet Genesis Import Test') {
                    when {
                        expression {
                            return params.RunP05;
                        }
                    }
                    steps {
                        build job: '/Sonic/Testnet-genesis-sync', parameters: [
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}"),
                            string(name: 'LaScalaVersion', value: "${LASCALA_VERSION}")
                        ]
                    }
                }

                stage('P06 Sonic DB Heal Test') {
                    when {
                        expression {
                            return params.RunP06;
                        }
                    }
                    steps {
                        build job: '/Sonic/DB-Heal', parameters: [
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }

                stage('P07 Sonic RPC tests') {
                    when {
                        expression {
                            return params.RunP07;
                        }
                    }
                    steps {
                        build job: '/Sonic/RPC-tests', parameters: [
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
