// Master job for running release candidate tests in parallel

pipeline {
    agent { label 'coordinator' }

    environment {
        AIDA_VERSION = ''
        CARMEN_VERSION  = ''
        TOSCA_VERSION = ''
        SONIC_VERSION = ''
    }

    parameters {
        string(defaultValue: "first", description: '', name: 'BlockFrom')
        string(defaultValue: "last", description: '', name: 'BlockTo')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'AidaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'CarmenVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'ToscaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'NormaVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'SonicVersion')
        string(defaultValue: "main", description: 'Can be either branch name or commit hash.', name: 'LaScalaVersion')
        string(defaultValue: "mainnet-297900-validator.g", description: 'Name of the genesis file to download', name: 'Genesis')
        booleanParam(defaultValue: true, description: 'If checked, F01 stage will be executed', name: 'RunF01')
        booleanParam(defaultValue: true, description: 'If checked, F02 stage will be executed', name: 'RunF02')
        booleanParam(defaultValue: true, description: 'If checked, F03 stage will be executed', name: 'RunF03')
        booleanParam(defaultValue: true, description: 'If checked, F04 stage will be executed', name: 'RunF04')
        booleanParam(defaultValue: true, description: 'If checked, F05 stage will be executed', name: 'RunF05')
        booleanParam(defaultValue: true, description: 'If checked, F06 stage will be executed', name: 'RunF06')
        booleanParam(defaultValue: true, description: 'If checked, F07 stage will be executed', name: 'RunF07')
        booleanParam(defaultValue: true, description: 'If checked, F08 stage will be executed', name: 'RunF08')
        booleanParam(defaultValue: true, description: 'If checked, F09 stage will be executed', name: 'RunF09')
        booleanParam(defaultValue: true, description: 'If checked, N01 stage will be executed', name: 'RunN01')
        booleanParam(defaultValue: true, description: 'If checked, N02-N04 stage will be executed', name: 'RunN02N04')
        booleanParam(defaultValue: true, description: 'If checked, N03 stage will be executed', name: 'RunN03')
        booleanParam(defaultValue: true, description: 'If checked, P01 stage will be executed', name: 'RunP01')
        booleanParam(defaultValue: true, description: 'If checked, P02 stage will be executed', name: 'RunP02')
        booleanParam(defaultValue: true, description: 'If checked, P03 stage will be executed', name: 'RunP03')
    }

    stages {
        stage('Get last commit sha') {
            steps {
                checkout scmGit(
                    branches: [[name: "${AidaVersion}"]],
                    userRemoteConfigs: [[url: "https://github.com/Fantom-foundation/Aida.git"]]
                )

                script {
                   AIDA_VERSION = sh (
                        script: 'git log -1 --pretty=format:"%H"',
                        returnStdout: true
                    ).trim()
                    echo "Aida branch last commit id: ${AIDA_VERSION}"
                }

                sh "git submodule update --init --recursive"

                dir('carmen') {
                	checkout scmGit(
                		branches: [[name: "${CarmenVersion}"]],
                		userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Carmen.git']]
                	)

                    script {
                       CARMEN_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Carmen branch last commit id: ${CARMEN_VERSION}"
                    }
                }

                dir('tosca') {
                    checkout scmGit(
                        branches: [[name: "${ToscaVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Tosca.git']]
                    )

                    script {
                       TOSCA_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Tosca branch last commit id: ${TOSCA_VERSION}"
                    }
                }

                dir('sonic') {
                    checkout scmGit(
                        branches: [[name: "${SonicVersion}"]],
                        userRemoteConfigs: [[url: 'https://github.com/Fantom-foundation/Sonic.git']]
                    )

                    script {
                       SONIC_VERSION = sh (
                            script: 'git log -1 --pretty=format:"%H"',
                            returnStdout: true
                        ).trim()
                        echo "Sonic branch last commit id: ${SONIC_VERSION}"
                    }
                }
            }
        }

        stage('Start parallel stage execution') {
            parallel {
                stage('F01 block processing (testnet)') {
                    when {
                        expression {
                            return params.RunF01;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F01', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('F02 block processing (mainnet) 0-45m') {
                    when {
                        expression {
                            return params.RunF02;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F02', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "45000000"),
                            string(name: 'GenesisBlock', value: ""),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }

                stage('F02 block processing (mainnet) 45m-60m') {
                    when {
                        expression {
                            return params.RunF02;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F02', parameters: [
                            string(name: 'BlockFrom', value: "45000001"),
                            string(name: 'BlockTo', value: "60000000"),
                            string(name: 'GenesisBlock', value: "45000000"),
                            string(name: 'BucketPath', value: "carmen-genesis-generator/61"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }

                stage('F02 block processing (mainnet) 60m-last') {
                    when {
                        expression {
                            return params.RunF02;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F02', parameters: [
                            string(name: 'BlockFrom', value: "60000001"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'GenesisBlock', value: "60000000"),
                            string(name: 'BucketPath', value: "carmen-genesis-generator/53"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('F03 RPC node simulation (testnet)') {
                    when {
                        expression {
                            return params.RunF03;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F03', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'ArchiveQueryRate', value: "200"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('F04 RPC node simulation (mainnet)') {
                    when {
                        expression {
                            return params.RunF04;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F04', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'ArchiveQueryRate', value: "200"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('F05 RPC request processing (mainnet)') {
                    when {
                        expression {
                            return params.RunF05;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F05', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('F06 Syntactic transactions') {
                    when {
                        expression {
                            return params.RunF06;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F06', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('F07 Ethereum State Tests') {
                    when {
                        expression {
                            return params.RunF07;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F07', parameters: [
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('F08 Norma') {
                    when {
                        expression {
                            return params.RunF08;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F08', parameters: [
                            string(name: 'NormaVersion', value: "${NormaVersion}"),
                        ]
                    }
                }
                stage('F09 Carmen Unit and Integration Tests') {
                    when {
                        expression {
                            return params.RunF09;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/FunctionalTests/F09', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}")
                        ]
                    }
                }
                stage('N01 block processing (mainnet)') {
                    when {
                        expression {
                            return params.RunN01;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/NonfunctionalTests/N01', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('N02/N04 block processing with archive-db and RPC request processing (mainnet)') {
                    when {
                        expression {
                            return params.RunN02N04;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/NonfunctionalTests/N02-N04', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('N03 RPC node simulation (mainnet)') {
                    when {
                        expression {
                            return params.RunN03;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/NonfunctionalTests/N03', parameters: [
                            string(name: 'BlockFrom', value: "${BlockFrom}"),
                            string(name: 'BlockTo', value: "${BlockTo}"),
                            string(name: 'ArchiveQueryRate', value: "150"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}"),
                            string(name: 'ToscaVersion', value: "${TOSCA_VERSION}")
                        ]
                    }
                }
                stage('P01 Opera Genesis Tests') {
                    when {
                        expression {
                            return params.RunP01;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P01', parameters: [
                            string(name: 'TmpDb', value: "/mnt/tmp-disk"),
                            string(name: 'AidaDb', value: "/mnt/aida-db-central/aida-db"),
                            string(name: 'FirstBlockHeight', value: "5000000"),
                            string(name: 'SecondBlockHeight', value: "6000000"),
                            string(name: 'AidaVersion', value: "${AIDA_VERSION}"),
                            string(name: 'CarmenVersion', value: "${CARMEN_VERSION}")
                        ]
                    }
                }
                stage('P02 Sonic Genesis Tests') {
                    when {
                        expression {
                            return params.RunP02;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P02', parameters: [
                            string(name: 'Genesis', value: "${Genesis}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}")
                        ]
                    }
                }
                stage('P03 Sonic RPC Test') {
                    when {
                        expression {
                            return params.RunP03;
                        }
                    }
                    steps {
                        build job: '/ReleaseTesting/OperationalTests/P03', parameters: [
                            string(name: 'Genesis', value: "${Genesis}"),
                            string(name: 'SonicVersion', value: "${SONIC_VERSION}"),
                            string(name: 'LaScalaVersion', value: "${LaScalaVersion}")
                        ]
                    }
                }
            }
        }
    }

    post {
        always {
            build job: '/Notifications/slack-notification', parameters: [
                string(name: 'result', value: "${currentBuild.result}"),
                string(name: 'name', value: "${currentBuild.fullDisplayName}"),
                string(name: 'duration', value: "${currentBuild.duration}"),
                string(name: 'url', value: "${currentBuild.absoluteUrl}"),
                string(name: 'user', value: "aida")
            ]
        }
    }
}
